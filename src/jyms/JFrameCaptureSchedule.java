/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;

import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import jyms.data.TimeTemplateBean;
import jyms.data.TxtLogger;

/**
 *
 * @author John
 */
public class JFrameCaptureSchedule extends javax.swing.JFrame {
    
    String sFileName = this.getClass().getName() + ".java";
    private DefaultTableModel deviceResourceTableModel;
    private DefaultMutableTreeNode m_DeviceRootResource;//通道树根节点
    
    private HCNetSDK.NET_DVR_RECORD_V30 m_struRemoteRecCfg = new HCNetSDK.NET_DVR_RECORD_V30();//录像参数
    private HCNetSDK.NET_DVR_SCHED_CAPTURECFG m_struSchedCaptureCFG = new HCNetSDK.NET_DVR_SCHED_CAPTURECFG();//录像参数
    

    String sStoreType = "录像";//存储计划类型，包括录像“Record”和抓图“Capture”存储计划
    
    
    
    String sChannelNode;//存储当前的通道节点名
    String sAnotherName;//存储当前的设备别名
    int iChannel;//存储当前的通道号
    
    private boolean bIntialSelect = true;//是否刷新右侧界面过程中选择JComboBox，因为编码选择也是触发了ItemStateChanged事件
    private HCNetSDK.NET_DVR_SCHEDTIMEWEEK[] strSchedTimeWeek = new HCNetSDK.NET_DVR_SCHEDTIMEWEEK[HCNetSDK.MAX_DAYS];//每天一个时段，共7天
//    private ArrayList<DeviceParaBean> listDeviceparaBean;//已管理设备参数表的Bean列表
//    private ArrayList<NativeLong> listDeviceLoginUserID = new ArrayList<NativeLong>();//存储设备的登录UserID
    
    
    /**
     * Creates new form JFrameRecordSchedule
     */
    public JFrameCaptureSchedule() {
        this("抓图");
    }
    
    public JFrameCaptureSchedule(String StoreType) {
        initComponents();
        this.sStoreType = StoreType;
        this.setTitle(sStoreType + "存储计划");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupRecordType = new javax.swing.ButtonGroup();
        buttonGroupRecordModel = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jRadioButtonTime = new javax.swing.JRadioButton();
        jRadioButtonEvent = new javax.swing.JRadioButton();
        jButtonSave = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jCheckBoxIfRecord = new javax.swing.JCheckBox();
        jComboBoxSetAlarmTime = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButtonTemplate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeResource = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "抓图类型", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 15))); // NOI18N
        jPanel8.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N

        buttonGroupRecordType.add(jRadioButtonTime);
        jRadioButtonTime.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jRadioButtonTime.setSelected(true);
        jRadioButtonTime.setText("定时抓图");

        buttonGroupRecordType.add(jRadioButtonEvent);
        jRadioButtonEvent.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jRadioButtonEvent.setText("事件抓图");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButtonTime)
                .addGap(4, 4, 4)
                .addComponent(jRadioButtonEvent)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonTime)
                    .addComponent(jRadioButtonEvent))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonSave.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonSave.setText("保存");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonExit.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonExit.setText("退出");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jCheckBoxIfRecord.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxIfRecord.setText("启用计划抓图");
        jCheckBoxIfRecord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxIfRecordItemStateChanged(evt);
            }
        });

        jComboBoxSetAlarmTime.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jComboBoxSetAlarmTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "全天模板", "工作日模板", "添加模板" }));
        jComboBoxSetAlarmTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSetAlarmTimeItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("布防时间：");

        jButtonTemplate.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jButtonTemplate.setText("编辑模板");
        jButtonTemplate.setEnabled(false);
        jButtonTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTemplateActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jLabel3.setText("抓图保存时间：");

        jTextField1.setText("30");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addGap(101, 101, 101))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBoxSetAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTemplate)))
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(269, 269, 269))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBoxIfRecord)
                        .addGap(596, 596, 596)
                        .addComponent(jButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExit)
                        .addGap(50, 50, 50))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxIfRecord)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonTemplate)
                            .addComponent(jComboBoxSetAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(478, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        jLabel1.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 0));
        jLabel1.setText("监控点");

        jTreeResource.setModel(this.initialResourceTreeModel());
        jTreeResource.setRootVisible(false);
        jTreeResource.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeResourceValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeResource);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(156, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //refeshDeviceParaList();

        CommonParas.CreateGroupResourceTree(jTreeResource, m_DeviceRootResource,CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE, sFileName);//监控点m_DeviceRootResource
        //CreateResourceTree();
    }//GEN-LAST:event_formWindowOpened

    private void jTreeResourceValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeResourceValueChanged
        // TODO add your handling code here:

//        DefaultMutableTreeNode  NewNode =(DefaultMutableTreeNode)jTreeResource.getSelectionPath().getLastPathComponent();
//        String GroupName = NewNode.toString();
//        int Level = NewNode.getLevel();//如果是在组名上则为1；在节点上则为2
        try {
            DefaultMutableTreeNode selectionNode = (DefaultMutableTreeNode) jTreeResource.getLastSelectedPathComponent();
            if (selectionNode == null) return;
            String nodeName = selectionNode.toString();

            // 判断是否为树叶节点，若是则读取设备通道录像参数，若不是则不做任何事。
            if (selectionNode.isLeaf()) {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                bIntialSelect = true;//是否刷新右侧界面过程中选择JComboBox。保证在下面的编码选择不触动JComboBox的Item改变事件。
                sChannelNode = nodeName;
                //设备名称
                sAnotherName = sChannelNode.substring(0, sChannelNode.indexOf("_"));
                //通道号
                iChannel = getChannelNumber(sChannelNode);
                //读取设备通道录像参数
                IntByReference ibrBytesReturned = new IntByReference(0);//获取录像参数
                NativeLong lUserID = CommonParas.getUserID(sAnotherName, sFileName);

                boolean getDVRConfigSuc = false;
                m_struRemoteRecCfg = new HCNetSDK.NET_DVR_RECORD_V30();
                m_struRemoteRecCfg.write();
                Pointer lpPicConfig = m_struRemoteRecCfg.getPointer();
                getDVRConfigSuc = CommonParas.hCNetSDK.NET_DVR_GetDVRConfig(lUserID, HCNetSDK.NET_DVR_GET_RECORDCFG_V30,
                        new NativeLong(iChannel), lpPicConfig, m_struRemoteRecCfg.size(), ibrBytesReturned);
                m_struRemoteRecCfg.read();
                if (getDVRConfigSuc != true)
                {
                    System.out.println(CommonParas.hCNetSDK.NET_DVR_GetLastError());
                    JOptionPane.showMessageDialog(this, "获取录像参数失败");
                    return;
                }
                //显示存储计划内容
                //showRecordSchedule();
//                jCheckBoxIfRecord.setSelected((m_struRemoteRecCfg.dwRecord > 0) ? true : false);
                bIntialSelect = false;//刷新右侧界面过后选择JComboBox。则会触动JComboBox的Item改变事件。
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jTreeResourceValueChanged()","系统在读取录像计划过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jTreeResourceValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if ((JOptionPane.showConfirmDialog(this, "存储计划已经被更改，是否保存？",  
                    "提醒",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)) 
            saveRecordSchedule();//存储设备通道存储计划
    }//GEN-LAST:event_formWindowClosing

    private void jCheckBoxIfRecordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxIfRecordItemStateChanged
        // TODO add your handling code here:
        setEnable();
    }//GEN-LAST:event_jCheckBoxIfRecordItemStateChanged

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        //        if ((JOptionPane.showConfirmDialog(this, "存储计划已经被更改，是否保存？",
            //                    "提醒",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION))
//            saveRecordSchedule();//存储设备通道存储计划
this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // TODO add your handling code here:
        saveRecordSchedule();//存储设备通道存储计划
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jComboBoxSetAlarmTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSetAlarmTimeItemStateChanged
        // TODO add your handling code here:
//        ComboBoxAlarmTimeItemChanged(jComboBoxSetAlarmTime,jButtonTemplate,evt);
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            if (bIntialSelect) return;
            String TimeTemplate = jComboBoxSetAlarmTime.getSelectedItem().toString();
            switch (TimeTemplate){
                case "全天模板":
                case "工作日模板":
                setStrSchedTimeWeekAllWork(TimeTemplate);
                jButtonTemplate.setEnabled(false);
                break;
                case "添加模板":
                jButtonTemplate.setEnabled(true);
                break;
                default://其他模板，以前定义过的模板
                setStrSchedTimeWeek(TimeTemplate);
                jButtonTemplate.setEnabled(true);
                break;
            }
        }
    }//GEN-LAST:event_jComboBoxSetAlarmTimeItemStateChanged

    private void jButtonTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTemplateActionPerformed
        // TODO add your handling code here:
        editTimeTemplate(jComboBoxSetAlarmTime);
        
    }//GEN-LAST:event_jButtonTemplateActionPerformed
    
    /**
        *函数:      getByteValue
        *函数描述:  得到JSpinner的数值。因为直接转换byte会出现错误
        *@param  jSpinner
     */
    private byte getByteValue(JSpinner jSpinner){
        return Byte.parseByte(jSpinner.getValue().toString());
    }
    
    /**
        *函数:      initialResourceTreeModel
        *函数描述:  初始化设备资源树
        * @return DefaultTreeModel
     */
    private DefaultTreeModel initialResourceTreeModel()
    {
        m_DeviceRootResource = new DefaultMutableTreeNode("监控点");
        DefaultTreeModel myDefaultTreeModel = new DefaultTreeModel(m_DeviceRootResource);//使用根节点创建模型
        return myDefaultTreeModel;
    }
    
    /**
	 * 函数:      setStrSchedTimeWeekAllWork
         * 函数描述:  设置布防时间段，针对全天模板和工作日模板
    */
    private void setStrSchedTimeWeekAllWork(String Type){
        byte byStartHour=0,byStartMin=0,byStopHour=24,byStopMin=0;
        switch (Type){
            case "全天模板":
                break;
            case "工作日模板":
                byStartHour=8;
                byStopHour=20;
                break;
        }
        for (int i=0;i<HCNetSDK.MAX_DAYS;i++){
            strSchedTimeWeek[i].struAlarmTime[0].byStartHour = byStartHour;
            strSchedTimeWeek[i].struAlarmTime[0].byStartMin = byStartMin;
            strSchedTimeWeek[i].struAlarmTime[0].byStopHour = byStopHour;
            strSchedTimeWeek[i].struAlarmTime[0].byStopMin = byStopMin;
        }
    }
    
    /**
	 * 函数:      setStrSchedTimeWeek
         * 函数描述:  根据下拉列表框选择的模板设置布防时间段
    */
    private void setStrSchedTimeWeek(String TimeTemplate){
        
        ArrayList<TimeTemplateBean> listTimeTemplateBean = TimeTemplateBean.getTimeTemplateList(TimeTemplate, sFileName);
        
        for (int i=0;i<listTimeTemplateBean.size();i++){
            TimeTemplateBean timeTemplateBean = listTimeTemplateBean.get(i);
            strSchedTimeWeek[i].struAlarmTime[0].byStartHour = timeTemplateBean.getStarthour();
            strSchedTimeWeek[i].struAlarmTime[0].byStartMin = timeTemplateBean.getStartminute();
            strSchedTimeWeek[i].struAlarmTime[0].byStopHour = timeTemplateBean.getStophour();
            strSchedTimeWeek[i].struAlarmTime[0].byStopMin = timeTemplateBean.getStopminute();
        }
        //MAX_DAYS
    }
    
    /**
	 * 函数:      editTimeTemplate
         * 函数描述:  编辑时间模板
         * @param ComboxBoxAlarmTime  时间模板下拉框
    */
    private void editTimeTemplate(JComboBox ComboxBoxAlarmTime) {                                                
        // TODO add your handling code here:
        String TimeTemplate = ComboxBoxAlarmTime.getSelectedItem().toString();
        switch (TimeTemplate){
            case "全天模板":
            case "工作日模板":
                return;
            default:
                break;
        }
        JDialogTimeTemplate DialogTimeTemplate = new JDialogTimeTemplate(this, true, TimeTemplate,strSchedTimeWeek);
        DialogTimeTemplate.setVisible(true);

        int State = DialogTimeTemplate.getReturnStatus();
        if (State < 0) return;//取消操作

        TimeTemplate = DialogTimeTemplate.getTimeTemplateName();
        switch (TimeTemplate){
            case "全天模板":
            case "工作日模板":
            ComboxBoxAlarmTime.setSelectedItem(TimeTemplate);
            break;
            default:
            ComboxBoxAlarmTime.addItem(TimeTemplate);
            ComboxBoxAlarmTime.setSelectedItem(TimeTemplate);
            //                //添加设备的关联模板
            break;
        }

    } 

    /**
	 * 函数:      setJSpinnerValue
         * @para Slider   JSlider控件
         * @para Spinner1   JSpinner控件
         * @para Spinner2   JSpinner控件
         * 函数描述:  根据Slider的值动态设定Spinner1和Spinner2的值
    */
    private void setJSpinnerValue(JSlider Slider,JSpinner Spinner1,JSpinner Spinner2){
        int Hour = Slider.getValue()/60;
        int Minute = Slider.getValue() - Hour * 60;
        //24:00实际上是0：00
//        if (Hour == 24 && Minute ==0){
//            Hour = 23;
//            Minute =59;
//        }
        
        Spinner1.setValue(Hour);
        Spinner2.setValue(Minute);
    }
    /**
	 * 函数:      setAllJSiliderModel
         * 函数描述:  重新设定所有的JSilider控件的属性
    */
//    private void setAllJSiliderModel(){
//        setJSiliderModel(slider11);
//        setJSiliderModel(slider12);
//        setJSiliderModel(slider21);
//        setJSiliderModel(slider22);
//        setJSiliderModel(slider31);
//        setJSiliderModel(slider32);
//        setJSiliderModel(slider41);
//        setJSiliderModel(slider42);
//        setJSiliderModel(slider51);
//        setJSiliderModel(slider52);
//        setJSiliderModel(slider61);
//        setJSiliderModel(slider62);
//        setJSiliderModel(slider71);
//        setJSiliderModel(slider72);
//
//    }
    /**
	 * 函数:      setJSiliderModel
         * 函数描述:  重新设定JSlider控件的属性
         * @para Slider   JSlider控件
    */
    private void setJSiliderModel(JSlider Slider){
        Hashtable table = new Hashtable();

        table.put(0, new JLabel("0"));
        table.put(120, new JLabel("2"));
        table.put(240, new JLabel("4"));
        table.put(360,new JLabel("6"));
        table.put(480, new JLabel("8"));
        table.put(600, new JLabel("10"));
        table.put(720, new JLabel("12"));
        table.put(840, new JLabel("14"));

        table.put(960, new JLabel("16"));
        table.put(1080, new JLabel("18"));
        table.put(1200, new JLabel("20"));
        table.put(1320, new JLabel("22"));
        table.put(1440, new JLabel("24"));
        
        Slider.setLabelTable(table);
    }
    /**
	 * 函数:      setJSpinnerModel
         * 函数描述:  重新设定JSpinner控件的属性
         * @para Spinner   JSpinner控件
    */
    private void setJSpinnerModel(JSpinner Spinner){
        JSpinner.NumberEditor editor = new JSpinner.NumberEditor(Spinner, "0");
        Spinner.setEditor(editor);
        JFormattedTextField textField = ((JSpinner.NumberEditor) Spinner.getEditor()).getTextField();
        textField.setEditable(true);
        DefaultFormatterFactory factory = (DefaultFormatterFactory) textField.getFormatterFactory();
        NumberFormatter formatter = (NumberFormatter) factory.getDefaultFormatter();
        formatter.setAllowsInvalid(false);
    }
    /**
	 * 函数:      setAllSpinnerModel
         * 函数描述:  重新设定所有的JSpinner控件的属性
    */
//    private void setAllSpinnerModel(){
//        setJSpinnerModel(jSpinnerHour11);
//        setJSpinnerModel(jSpinnerHour12);
//        setJSpinnerModel(jSpinnerHour21);
//        setJSpinnerModel(jSpinnerHour22);
//        setJSpinnerModel(jSpinnerHour31);
//        setJSpinnerModel(jSpinnerHour32);
//        setJSpinnerModel(jSpinnerHour41);
//        setJSpinnerModel(jSpinnerHour42);
//        setJSpinnerModel(jSpinnerHour51);
//        setJSpinnerModel(jSpinnerHour52);
//        setJSpinnerModel(jSpinnerHour61);
//        setJSpinnerModel(jSpinnerHour62);
//        setJSpinnerModel(jSpinnerHour71);
//        setJSpinnerModel(jSpinnerHour72);
//        setJSpinnerModel(jSpinnerMinute11);
//        setJSpinnerModel(jSpinnerMinute12);
//        setJSpinnerModel(jSpinnerMinute21);
//        setJSpinnerModel(jSpinnerMinute22);
//        setJSpinnerModel(jSpinnerMinute31);
//        setJSpinnerModel(jSpinnerMinute32);
//        setJSpinnerModel(jSpinnerMinute41);
//        setJSpinnerModel(jSpinnerMinute42);
//        setJSpinnerModel(jSpinnerMinute51);
//        setJSpinnerModel(jSpinnerMinute52);
//        setJSpinnerModel(jSpinnerMinute61);
//        setJSpinnerModel(jSpinnerMinute62);
//        setJSpinnerModel(jSpinnerMinute71);
//        setJSpinnerModel(jSpinnerMinute72);
//    }
    /**
	 * 函数:      getChannelNumber
         * 函数描述:  获得该设备当前的通道号
         * @return int   设备当前的通道号
    */
    private int getChannelNumber(String ChannelNode){
        int Channel = Integer.parseInt(ChannelNode.substring(ChannelNode.lastIndexOf("_")+1,ChannelNode.length()));
        if (ChannelNode.lastIndexOf("IP") > -1) Channel = Channel + HCNetSDK.MAX_ANALOG_CHANNUM;//32;//IP通道号要加32
        return Channel;
    }
//    /**
//	 * 函数:      showRecordSchedule
//         * 函数描述:  显示设备通道存储计划
//    */
//    private void showRecordSchedule(){
//        boolean IfRecord = (m_struRemoteRecCfg.dwRecord > 0) ? true : false;//是否启用计划存储
//        jCheckBoxIfRecord.setSelected(IfRecord);
//        /*系统设置全部7天全部是全天录像或者不是；全部7天都是一种录像类型，但是每天的起止时间可以不同，是为了设置尽量简单化*/
//        
//        //如果不启用计划存储，则直接设置不可用状态，不做任何操作
//        if(!IfRecord){
//            setEnable();//设置部件的可用/不可用状态
//        }
//        //以下是启用计划存储的情况
//        
//        //是否全天录像。
//        //如果全天录像。因为系统设置全天录像就是全部7天都是全天录像，所以只判断星期一就可以了。
//        else if (m_struRemoteRecCfg.struRecAllDay[0].wAllDayRecord == 1) {
//            jRadioButtonAllDay.setSelected(true);//全天模式启用
//            setEnable();//设置部件的可用/不可用状态
////            return;
//        }else{//选择自定义模式
//            jRadioButtonSelfDefine.setSelected(true);
//            setEnable();//设置部件的可用/不可用状态
//            
//        }
//        byte RecordType;
//        if (m_struRemoteRecCfg.struRecAllDay[0].wAllDayRecord == 1) 
//            RecordType =  m_struRemoteRecCfg.struRecAllDay[0].byRecordType;
//        else 
//            RecordType =  m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].byRecordType;
//        switch (RecordType){
//            case 0://0-定时录像
//                jRadioButtonTime.setSelected(true);
//                break;
//            case 13://2-报警录像
//                jRadioButtonEvent.setSelected(true);
//                break;
//            case 5://5-命令触发录像
//                jRadioButtonCommandTrigger.setSelected(true);
//                break;
//            default://其他报警录像
//                jRadioButtonEvent.setSelected(true);
//                break;
//        }
//        
//        //以下是非全天录像的情况，也就是自定义模式
//        //不全天录像，就是全部是不全天录像。系统暂时这样认定
//        
//        //星期一
//        jSpinnerHour11.setValue(m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStartHour);
//        jSpinnerMinute11.setValue(m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStartMin);
//        jSpinnerHour12.setValue(m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStopHour);
//        jSpinnerMinute12.setValue(m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStopMin);
//        
//        
//        //星期二
//        jSpinnerHour21.setValue(m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStartHour);
//        jSpinnerMinute21.setValue(m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStartMin);
//        jSpinnerHour22.setValue(m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStopHour);
//        jSpinnerMinute22.setValue(m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStopMin);
//        //星期三
//        jSpinnerHour31.setValue(m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStartHour);
//        jSpinnerMinute31.setValue(m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStartMin);
//        jSpinnerHour32.setValue(m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStopHour);
//        jSpinnerMinute32.setValue(m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStopMin);
//        //星期四
//        jSpinnerHour41.setValue(m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStartHour);
//        jSpinnerMinute41.setValue(m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStartMin);
//        jSpinnerHour42.setValue(m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStopHour);
//        jSpinnerMinute42.setValue(m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStopMin);
//        //星期五
//        jSpinnerHour51.setValue(m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStartHour);
//        jSpinnerMinute51.setValue(m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStartMin);
//        jSpinnerHour52.setValue(m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStopHour);
//        jSpinnerMinute52.setValue(m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStopMin);
//        //星期六
//        jSpinnerHour61.setValue(m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStartHour);
//        jSpinnerMinute61.setValue(m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStartMin);
//        jSpinnerHour62.setValue(m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStopHour);
//        jSpinnerMinute62.setValue(m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStopMin);
//        //星期日
//        jSpinnerHour71.setValue(m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStartHour);
//        jSpinnerMinute71.setValue(m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStartMin);
//        jSpinnerHour72.setValue(m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStopHour);
//        jSpinnerMinute72.setValue(m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStopMin);
//        
//    }
    /**
	 * 函数:      saveRecordSchedule
         * 函数描述:  存储设备通道存储计划
    */
    private void saveRecordSchedule(){
//        DefaultMutableTreeNode selectionNode = (DefaultMutableTreeNode) jTreeResource.getLastSelectedPathComponent();
//        // 判断是否为树叶节点，若是则继续设置设备通道录像参数，若不是则不做任何事。
//        if (!selectionNode.isLeaf()) return;
////        if (!jCheckBoxIfRecord.isSelected()) return;//如果不启用，则返回，什么都不做
//        
//        m_struRemoteRecCfg.dwRecord = (jCheckBoxIfRecord.isSelected() == true) ? 1 : 0;
//                
//        byte RecordType;
//        if(jRadioButtonCommandTrigger.isSelected() == true){//命令触发录像
//            RecordType = 5;
//        }else if (jRadioButtonTime.isSelected() == true) {//定时录像
//            RecordType = 0;
//        }else{//事件录像
//            RecordType = 13;//也就是报警录像
//        }
//        
//        try {
//            if(jRadioButtonAllDay.isSelected() == true){//全天模式
//                for (int i=0;i<7;i++){
//                    m_struRemoteRecCfg.struRecAllDay[i].wAllDayRecord = 1;
//                    m_struRemoteRecCfg.struRecAllDay[i].byRecordType = RecordType;
//                }
//            }else if (jRadioButtonWorkDay.isSelected() == true) {//工作日模式
//                //工作日模式只有一个时间段8-20点
//                for (int i=0;i<7;i++){
//                    m_struRemoteRecCfg.struRecAllDay[i].wAllDayRecord = 0;
//                    m_struRemoteRecCfg.struRecordSched[i].struRecordSched[0].struRecordTime.byStartHour = 8;
//                    m_struRemoteRecCfg.struRecordSched[i].struRecordSched[0].struRecordTime.byStartMin = 0;
//
//                    m_struRemoteRecCfg.struRecordSched[i].struRecordSched[0].struRecordTime.byStopHour = 20;
//                    m_struRemoteRecCfg.struRecordSched[i].struRecordSched[0].struRecordTime.byStopMin = 0;
//
//                    m_struRemoteRecCfg.struRecordSched[i].struRecordSched[0].byRecordType = RecordType;
//                }
//            }else{//自定义模式
//
//                for (int i=0;i<7;i++){
//                    m_struRemoteRecCfg.struRecAllDay[i].wAllDayRecord = 0;
//                }
//                //星期一
//                m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStartHour = Byte.parseByte(jSpinnerHour11.getValue().toString());
//                m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStartMin =getByteValue( jSpinnerMinute11);
//                m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStopHour =getByteValue( jSpinnerHour12);
//                m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].struRecordTime.byStopMin =getByteValue( jSpinnerMinute12);
//                m_struRemoteRecCfg.struRecordSched[0].struRecordSched[0].byRecordType = RecordType;
//                //星期二
//                m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStartHour =getByteValue( jSpinnerHour21);
//                m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStartMin =getByteValue( jSpinnerMinute21);
//                m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStopHour =getByteValue( jSpinnerHour22);
//                m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].struRecordTime.byStopMin =getByteValue( jSpinnerMinute22);
//                m_struRemoteRecCfg.struRecordSched[1].struRecordSched[0].byRecordType = RecordType;
//                //星期三
//                m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStartHour =getByteValue( jSpinnerHour31);
//                m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStartMin =getByteValue( jSpinnerMinute31);
//                m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStopHour =getByteValue( jSpinnerHour32);
//                m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].struRecordTime.byStopMin =getByteValue( jSpinnerMinute32);
//                m_struRemoteRecCfg.struRecordSched[2].struRecordSched[0].byRecordType = RecordType;
//                //星期四
//                m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStartHour =getByteValue( jSpinnerHour41);
//                m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStartMin =getByteValue( jSpinnerMinute41);
//                m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStopHour =getByteValue( jSpinnerHour42);
//                m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].struRecordTime.byStopMin =getByteValue( jSpinnerMinute42);
//                m_struRemoteRecCfg.struRecordSched[3].struRecordSched[0].byRecordType = RecordType;
//                //星期五
//                m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStartHour =getByteValue( jSpinnerHour51);
//                m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStartMin =getByteValue( jSpinnerMinute51);
//                m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStopHour =getByteValue( jSpinnerHour52);
//                m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].struRecordTime.byStopMin =getByteValue( jSpinnerMinute52);
//                m_struRemoteRecCfg.struRecordSched[4].struRecordSched[0].byRecordType = RecordType;
//                //星期六
//                m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStartHour =getByteValue( jSpinnerHour61);
//                m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStartMin =getByteValue( jSpinnerMinute61);
//                m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStopHour =getByteValue( jSpinnerHour62);
//                m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].struRecordTime.byStopMin =getByteValue( jSpinnerMinute62);
//                m_struRemoteRecCfg.struRecordSched[5].struRecordSched[0].byRecordType = RecordType;
//                //星期日
//                m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStartHour =getByteValue( jSpinnerHour71);
//                m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStartMin =getByteValue( jSpinnerMinute71);
//                m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStopHour =getByteValue( jSpinnerHour72);
//                m_struRemoteRecCfg.struRecordSched[6].struRecordSched[0].struRecordTime.byStopMin =getByteValue( jSpinnerMinute72);
//
//            }
//            
//            
//
//            //根据节点得到通道号，得到设备名称
//            //根据设备名称得到UserID
//            NativeLong lUserID = CommonParas.getUserID(sAnotherName, sFileName);
//
//            boolean setDVRConfigSuc = false;
//            m_struRemoteRecCfg.write();
//            Pointer lpPicConfig = m_struRemoteRecCfg.getPointer();
//            setDVRConfigSuc = CommonParas.hCNetSDK.NET_DVR_SetDVRConfig(lUserID, HCNetSDK.NET_DVR_SET_RECORDCFG_V30,
//                    new NativeLong(iChannel), lpPicConfig, m_struRemoteRecCfg.size());
//            m_struRemoteRecCfg.read();
//            if (setDVRConfigSuc != true)
//            {
//                System.out.println(CommonParas.hCNetSDK.NET_DVR_GetLastError());
//                JOptionPane.showMessageDialog(this, "设置录像参数失败");
//                return;
//            }
//            JOptionPane.showMessageDialog(this, "设置录像参数成功");
////            CommonParas.hCNetSDK.NET_DVR_StartDVRRecord(lUserID,new NativeLong(iChannel),new NativeLong(0));//手动录像，没有问题
//            //手动录像，没有问题0x00ff表示所有模拟通道，0xff00表示所有数字通道，0xffff表示所有模拟和数字通道 。试验0xffff时录像机全部摄像IP通道全部开始录像
////            CommonParas.hCNetSDK.NET_DVR_StartDVRRecord(lUserID,new NativeLong(0xffff),new NativeLong(0));
//
//
//        }catch (NumberFormatException | HeadlessException e){
//            TxtLogger.append(this.sFileName, "saveRecordSchedule()","系统在保存录像计划过程中，出现错误"
//                             + "\r\n                       Exception:" + e.toString());
//        }
    }
    /**
	 * 函数:      setEnable
         * 函数描述:  根据是否启用计划存储设置部件的可用/不可用状态
    */
    private void setEnable(){
        
        ////如果不启用，则全不可用
//        if (!jCheckBoxIfRecord.isSelected()) {
//            setAllJPanelEnable(false);
//            return;
//        }
//        
//        if(jRadioButtonAllDay.isSelected()){//全天模式
//            setAllJPanelEnable(false);
//        }else if (jRadioButtonWorkDay.isSelected()) {//工作日模式
//            setAllJPanelEnable(false);
//        }else{//自定义模式
//            if (jCheckBoxAllSame.isSelected()){
//                setJPanelAllOCXEnable(jPanelWeek1,true);
//                setJPanelAllOCXEnable(jPanelWeek2,false);
//                setJPanelAllOCXEnable(jPanelWeek3,false);
//                setJPanelAllOCXEnable(jPanelWeek4,false);
//                setJPanelAllOCXEnable(jPanelWeek5,false);
//                setJPanelAllOCXEnable(jPanelWeek6,false);
//                setJPanelAllOCXEnable(jPanelWeek7,false);
//            }else {
//                setAllJPanelEnable(true);
//            }
//            
//        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameCaptureSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameCaptureSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameCaptureSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameCaptureSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameCaptureSchedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupRecordModel;
    private javax.swing.ButtonGroup buttonGroupRecordType;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonTemplate;
    private javax.swing.JCheckBox jCheckBoxIfRecord;
    private javax.swing.JComboBox<String> jComboBoxSetAlarmTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButtonEvent;
    private javax.swing.JRadioButton jRadioButtonTime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTreeResource;
    // End of variables declaration//GEN-END:variables
}
