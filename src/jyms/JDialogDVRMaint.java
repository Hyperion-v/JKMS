/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;

import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import java.awt.Cursor;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Timer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import jyms.data.TxtLogger;
import jyms.tools.TreeUtil;
import jyms.ui.PanelUI_LineBorder;
import jyms.ui.PanelUI_MatteBorder;
import jyms.ui.ScrollBarUI_White;
import jyms.ui.ScrollPaneUI_White;
import jyms.ui.SplitPaneUI_White;

/**
 *
 * @author John
 */
public class JDialogDVRMaint extends javax.swing.JDialog {

    private final String sFileName= this.getClass().getName() + ".java";
    private DefaultMutableTreeNode m_DeviceRoot;//通道树根节点

    String sAnotherName = "";
    String sSerialNO = "";
    private NativeLong m_lUserID = new NativeLong(-1);//用户ID
    private JFileChooser upgradeJFileChooser;//文件选择器
    private NativeLong m_lUpgradeHandle = new NativeLong(-1);//文件升级句柄
    Timer timer;//定时器
    /**
     * Creates new form JDialogCheckTime
     * @param parent
     * @param modal
     */
    public JDialogDVRMaint(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        modifyLocales();
        //CommonParas.CreateGroupResourceTree(jTreeDev, m_DeviceRoot,"", sFileName);//监控设备
        jTreeDev.setModel(this.initialDevTreeModel());
        CommonParas.CreateDeviceTree(jTreeDev, m_DeviceRoot, "", sFileName);//监控设备
        jProgressBarUpgrade.setMinimum(0);
        jProgressBarUpgrade.setMaximum(100);
        jSplitPaneDVRMaint.setDividerLocation(180);
        
        //设置自定义UI
        jPanelContainer.setUI(new PanelUI_MatteBorder());
        jSplitPaneDVRMaint.setUI(new SplitPaneUI_White());
 
        jScrollPaneTree.setUI(new ScrollPaneUI_White());//jScrollPaneAlarmOut
        jScrollPaneTree.getVerticalScrollBar().setUI(new ScrollBarUI_White());
        jScrollPaneTree.getHorizontalScrollBar().setUI(new ScrollBarUI_White());
        
        jPanelRight.setUI(new PanelUI_LineBorder());
 
//            jPanelImportIn.setUI(new PanelUI_LineBorder());
//            jPanelImportOut.setUI(new PanelUI_LineBorder());
        CommonParas.setJButtonUnDecorated(jButtonExit);
        
        jTreeDev.setCellRenderer(new TreeUtil.CustomNodeTreeCellRenderer());
        
        /*超级管理员权限设置*/
        setInvisibleItemForNonAdmin();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFirst = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jPanelContainer = new javax.swing.JPanel();
        jSplitPaneDVRMaint = new javax.swing.JSplitPane();
        jScrollPaneTree = new javax.swing.JScrollPane();
        jTreeDev = new javax.swing.JTree();
        jPanelRight = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelRemind = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanelDVRManagement = new javax.swing.JPanel();
        jButtonReboot = new javax.swing.JButton();
        jButtonRestoreConfig = new javax.swing.JButton();
        jButtonCompleteRestore = new javax.swing.JButton();
        jButtonSetConfigFile = new javax.swing.JButton();
        jButtonGetConfigFile = new javax.swing.JButton();
        jPanelUpgrade = new javax.swing.JPanel();
        jLabelUpgradeTitle = new javax.swing.JLabel();
        jProgressBarUpgrade = new javax.swing.JProgressBar();
        jLabelUpgradeState = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabelUpgradeFile = new javax.swing.JLabel();
        jButtonUpgrade = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jTextFieldFileDir = new javax.swing.JTextField();
        jButtonBrowse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("设备维护");
        setMinimumSize(new java.awt.Dimension(980, 588));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(980, 588));

        jLabelTitle.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("设备维护");

        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/close.png"))); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFirstLayout = new javax.swing.GroupLayout(jPanelFirst);
        jPanelFirst.setLayout(jPanelFirstLayout);
        jPanelFirstLayout.setHorizontalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFirstLayout.createSequentialGroup()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelFirstLayout.setVerticalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFirstLayout.createSequentialGroup()
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelFirst, java.awt.BorderLayout.PAGE_START);

        jPanelContainer.setLayout(new java.awt.BorderLayout());

        jSplitPaneDVRMaint.setDividerLocation(200);

        jScrollPaneTree.setPreferredSize(new java.awt.Dimension(140, 322));

        jTreeDev.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTreeDev.setMaximumSize(new java.awt.Dimension(120, 64));
        jTreeDev.setName("jTreeDev"); // NOI18N
        jTreeDev.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeDevValueChanged(evt);
            }
        });
        jScrollPaneTree.setViewportView(jTreeDev);

        jSplitPaneDVRMaint.setLeftComponent(jScrollPaneTree);

        jPanelRight.setLayout(new java.awt.BorderLayout());

        jLabelRemind.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelRemind.setText("设备维护");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabelRemind, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(334, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelRemind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );

        jPanelRight.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanelDVRManagement.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "设备管理", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 16))); // NOI18N

        jButtonReboot.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonReboot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/devreboot.png"))); // NOI18N
        jButtonReboot.setText("重  启");
        jButtonReboot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRebootActionPerformed(evt);
            }
        });

        jButtonRestoreConfig.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonRestoreConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/devpararestore.png"))); // NOI18N
        jButtonRestoreConfig.setText("恢复默认参数");
        jButtonRestoreConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRestoreConfigActionPerformed(evt);
            }
        });

        jButtonCompleteRestore.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonCompleteRestore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/devpararestorefull.png"))); // NOI18N
        jButtonCompleteRestore.setText("完全恢复默认参数");
        jButtonCompleteRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompleteRestoreActionPerformed(evt);
            }
        });

        jButtonSetConfigFile.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonSetConfigFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/devprofilein.png"))); // NOI18N
        jButtonSetConfigFile.setText("导入配置文件");
        jButtonSetConfigFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetConfigFileActionPerformed(evt);
            }
        });

        jButtonGetConfigFile.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonGetConfigFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/devprofileout.png"))); // NOI18N
        jButtonGetConfigFile.setText("导出配置文件");
        jButtonGetConfigFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetConfigFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDVRManagementLayout = new javax.swing.GroupLayout(jPanelDVRManagement);
        jPanelDVRManagement.setLayout(jPanelDVRManagementLayout);
        jPanelDVRManagementLayout.setHorizontalGroup(
            jPanelDVRManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDVRManagementLayout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addGroup(jPanelDVRManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCompleteRestore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonReboot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRestoreConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSetConfigFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGetConfigFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(408, Short.MAX_VALUE))
        );
        jPanelDVRManagementLayout.setVerticalGroup(
            jPanelDVRManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDVRManagementLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonReboot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRestoreConfig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCompleteRestore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSetConfigFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGetConfigFile)
                .addContainerGap())
        );

        jPanel2.add(jPanelDVRManagement, java.awt.BorderLayout.PAGE_START);

        jPanelUpgrade.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "设备升级", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 16))); // NOI18N

        jLabelUpgradeTitle.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelUpgradeTitle.setText("状态：");

        jLabelUpgradeFile.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelUpgradeFile.setText("升级文件");

        jButtonUpgrade.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonUpgrade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/devupgrade.png"))); // NOI18N
        jButtonUpgrade.setText("升级");
        jButtonUpgrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpgradeActionPerformed(evt);
            }
        });

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldFileDir.setEditable(false);
        jTextFieldFileDir.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTextFieldFileDir.setText("c:\\digicap");
        jPanel6.add(jTextFieldFileDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 330, 30));

        jButtonBrowse.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonBrowse.setText("...");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });
        jPanel6.add(jButtonBrowse, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 40, 30));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabelUpgradeFile, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonUpgrade, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelUpgradeFile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonUpgrade))))
        );

        javax.swing.GroupLayout jPanelUpgradeLayout = new javax.swing.GroupLayout(jPanelUpgrade);
        jPanelUpgrade.setLayout(jPanelUpgradeLayout);
        jPanelUpgradeLayout.setHorizontalGroup(
            jPanelUpgradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpgradeLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanelUpgradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelUpgradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jProgressBarUpgrade, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelUpgradeLayout.createSequentialGroup()
                            .addComponent(jLabelUpgradeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabelUpgradeState, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jPanelUpgradeLayout.setVerticalGroup(
            jPanelUpgradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpgradeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelUpgradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelUpgradeState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelUpgradeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarUpgrade, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanelUpgrade, java.awt.BorderLayout.CENTER);

        jPanelRight.add(jPanel2, java.awt.BorderLayout.CENTER);

        jSplitPaneDVRMaint.setRightComponent(jPanelRight);

        jPanelContainer.add(jSplitPaneDVRMaint, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelContainer, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeDevValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeDevValueChanged
        // TODO add your handling code here:
        try{
            DefaultMutableTreeNode selectionNode = (DefaultMutableTreeNode) jTreeDev.getLastSelectedPathComponent();
            if (selectionNode == null) return;

            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            
            String nodeName = selectionNode.toString();
            if (selectionNode.isLeaf()) {
                sAnotherName = nodeName;
                m_lUserID = CommonParas.getUserID(sAnotherName, sFileName);
                sSerialNO = CommonParas.getSerialNO(sAnotherName, sFileName);
                jLabelRemind.setText(MessageFormat.format(sManagementRemind , sAnotherName));//sAnotherName + " 维护"
            }else {
                sAnotherName = "";
                m_lUserID = new NativeLong(-1);
                jLabelRemind.setText("");
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jTreeDevValueChanged()","系统在读取设备参数过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
           
    }//GEN-LAST:event_jTreeDevValueChanged

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        try{
            JFileChooser JFileChooser1 = new JFileChooser("");//启动一个文件选择器
    //        JFileChooser1.
            FileNameExtensionFilter filter = new FileNameExtensionFilter(MessageFormat.format(sUpgradeFile , sAnotherName), "mav", "dav");//升级文件（*.mav *.dav）
            JFileChooser1.setFileFilter(filter);
            if (JFileChooser.APPROVE_OPTION == JFileChooser1.showOpenDialog(this))//如果文件选择完毕
            {
                openFile(JFileChooser1.getSelectedFile().getPath());//作为将来的接口
                String filepath = JFileChooser1.getSelectedFile().getPath();//获取被选择文件的路径
                jTextFieldFileDir.setText(filepath);//输出文件路径
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jButtonBrowseActionPerformed()","系统在打开升级文件过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jButtonUpgradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpgradeActionPerformed
        try{
            if (!ifLoginSuccess()) return;
            File fileUpgrade = new File(jTextFieldFileDir.getText());
            if (fileUpgrade.canRead() == false)
            {
                JOptionPane.showMessageDialog(this, sInvalidFile);// "无效文件"
                return;
            }
            if (fileUpgrade.length() == 0)
            {
                JOptionPane.showMessageDialog(this, sFileIsEmpty);// "文件为空"
                return;
            }
            m_lUpgradeHandle = CommonParas.hCNetSDK.NET_DVR_Upgrade(m_lUserID, jTextFieldFileDir.getText());
            if (m_lUpgradeHandle.intValue() < 0)
            {
                CommonParas.SystemWriteErrorLog(sUpgradeFile, sAnotherName, sFileName);//"设备升级失败"
                CommonParas.showErrorMessage(sUpgradeFile, sAnotherName, sFileName);//"设备升级失败"
                //JOptionPane.showMessageDialog(this, "设备升级失败。错误代码：" + CommonParas.hCNetSDK.NET_DVR_GetLastError());
            } else
            {
                timer = new Timer();//新建定时器
                timer.schedule(new MyTask(), 0, 500);//0秒后开始响应函数
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jButtonUpgradeActionPerformed()","系统在设备升级过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jButtonUpgradeActionPerformed

    private void jButtonRebootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRebootActionPerformed
        // TODO add your handling code here:
        
        try{
            if (!ifLoginSuccess()) return;

            int iResponse = JOptionPane.showConfirmDialog(this, sRealReboot, sReboot, JOptionPane.OK_CANCEL_OPTION);// "确定重启设备?" "重启"
            //确认
            if (iResponse ==  JOptionPane.OK_OPTION ){
                if (!CommonParas.hCNetSDK.NET_DVR_RebootDVR(m_lUserID)){
                    //JOptionPane.showMessageDialog(this, "设备重启失败。错误代码：" + CommonParas.hCNetSDK.NET_DVR_GetLastError());
                    CommonParas.SystemWriteErrorLog(sDVRRebootFail, sAnotherName, sFileName);// "设备重启失败"
                    CommonParas.showErrorMessage(sDVRRebootFail, sAnotherName, sFileName);// "设备重启失败"
                    
                    return;
                }else{
                    //操作时间、日志类型、描述信息、设备序列号、设备类型、调用的文件名
                    CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, sDVRReboot,sSerialNO , CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);// "设备重启"
                    CommonParas.showMessage(sDVRRebootSucc, sFileName);//"设备重启成功"
                    //JOptionPane.showMessageDialog(this, "设备校时成功");
                }
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jButtonRebootActionPerformed()","系统在重启设备过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jButtonRebootActionPerformed

    private void jButtonRestoreConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRestoreConfigActionPerformed
        // TODO add your handling code here:
        try{
            if (!ifLoginSuccess()) return;

            int iResponse = JOptionPane.showConfirmDialog(this, sRealRestoreConfig, sRestoreConfig, JOptionPane.OK_CANCEL_OPTION);// "确定恢复默认参数?" "恢复默认参数"
            if (iResponse == JOptionPane.OK_OPTION){//确认
                if (!CommonParas.hCNetSDK.NET_DVR_RestoreConfig(m_lUserID)){
                    CommonParas.SystemWriteErrorLog(sRestoreConfigFail, sAnotherName, sFileName);// "恢复默认参数失败"
                    CommonParas.showErrorMessage(sRestoreConfigFail, sAnotherName, sFileName);// "恢复默认参数失败"
                    
                    //JOptionPane.showMessageDialog(this, "恢复默认参数失败。错误代码：" + CommonParas.hCNetSDK.NET_DVR_GetLastError());
                }else{
                    //操作时间、日志类型、描述信息、设备序列号、设备类型、调用的文件名
                    CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, sRestoreConfig, sSerialNO , CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);// "恢复默认参数"
                    CommonParas.showMessage(sRestoreConfigSucc, sFileName);// "成功恢复默认参数"
                }
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jButtonRestoreConfigActionPerformed()","系统在恢复默认参数过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jButtonRestoreConfigActionPerformed

    private void jButtonCompleteRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompleteRestoreActionPerformed
        // TODO add your handling code here:
        try{
            if (!ifLoginSuccess()) return;
            int iResponse = JOptionPane.showConfirmDialog(this, sRealCompleteRestore, sCompleteRestore, JOptionPane.OK_CANCEL_OPTION);// "确定完全恢复默认参数?""完全恢复默认参数"
            if (iResponse == JOptionPane.CANCEL_OPTION) return;

            HCNetSDK.NET_DVR_COMPLETE_RESTORE_INFO strCompleteRestoreInfo = new HCNetSDK.NET_DVR_COMPLETE_RESTORE_INFO();
            strCompleteRestoreInfo.dwSize = strCompleteRestoreInfo.size();//没想到这一步竟然很关键，不设置的话，会报参数错误。
            strCompleteRestoreInfo.dwChannel = 1;
            strCompleteRestoreInfo.write();
            Pointer lpCompleteRestoreInfo = strCompleteRestoreInfo.getPointer();
            boolean SetTrackSuccess = CommonParas.hCNetSDK.NET_DVR_RemoteControl(m_lUserID, HCNetSDK.NET_DVR_COMPLETE_RESTORE_CTRL,
                                                                                lpCompleteRestoreInfo, strCompleteRestoreInfo.size());
            strCompleteRestoreInfo.read();
            if (SetTrackSuccess) {
                //System.out.println("完全恢复默认参数成功！");
                //操作时间、日志类型、描述信息、设备序列号、设备类型、调用的文件名
                CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, sCompleteRestore,sSerialNO , CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);// "完全恢复默认参数"
                CommonParas.showMessage(sCompleteRestoreSucc , sFileName);//"成功完全恢复默认参数"
            }else {
                CommonParas.SystemWriteErrorLog(sCompleteRestoreFail, sAnotherName, sFileName);// "完全恢复默认参数失败"
                CommonParas.showErrorMessage(sCompleteRestoreFail, sAnotherName, sFileName);// "完全恢复默认参数失败"
                //JOptionPane.showMessageDialog(this, "设置完全恢复出厂值失败。错误代码：" + CommonParas.hCNetSDK.NET_DVR_GetLastError());
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jButtonCompleteRestoreActionPerformed()","系统在设置完全恢复出厂值过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jButtonCompleteRestoreActionPerformed

    private void jButtonSetConfigFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetConfigFileActionPerformed
        // TODO add your handling code here:
        try{
            if (!ifLoginSuccess()) return;
            JFileChooser JFileChooser1 = new JFileChooser();//启动一个文件选择器

            FileNameExtensionFilter filter = new FileNameExtensionFilter(sConfigFile, "bin");// "配置文件（*.bin）
            JFileChooser1.setFileFilter(filter);
            //为设备配置文件导入/导出的文件选择对话框设置默认目录 
            CommonParas.SysParas.setFileChooserDirectory(JFileChooser1);

            if (JFileChooser.APPROVE_OPTION == JFileChooser1.showOpenDialog(this)){//如果文件选择完毕

                String filepath = JFileChooser1.getSelectedFile().getPath();//获取被选择文件的路径
                if (!CommonParas.hCNetSDK.NET_DVR_SetConfigFile(m_lUserID, filepath)){
                    CommonParas.SystemWriteErrorLog(sSetConfigFileFail, sAnotherName, sFileName);// "导入配置文件失败"
                    CommonParas.showErrorMessage(sSetConfigFileFail , sAnotherName, sFileName);//"导入配置文件失败"
                    //JOptionPane.showMessageDialog(this, "导入配置文件失败。错误代码：" + CommonParas.hCNetSDK.NET_DVR_GetLastError());
                }else {
                    CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, sSetConfigFile , sSerialNO , CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sConfigFileColon + filepath, sFileName);// "导入配置文件""配置文件：" 
                    CommonParas.showMessage(sSetConfigFileSucc + filepath, sFileName);// "成功导入配置文件："
                    //JOptionPane.showMessageDialog(this, "成功导入配置文件到：" + filepath);
                }
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jButtonGetConfigFileActionPerformed()","系统在设导入配置文件过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jButtonSetConfigFileActionPerformed

    private void jButtonGetConfigFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetConfigFileActionPerformed
        // TODO add your handling code here:
        try{
            if (!ifLoginSuccess()) return;
            JFileChooser JFileChooser1 = new JFileChooser();//启动一个文件选择器

            FileNameExtensionFilter filter = new FileNameExtensionFilter(sConfigFile, "bin");// "配置文件（*.bin）"
            JFileChooser1.setFileFilter(filter);
            //为设备配置文件导入/导出的文件选择对话框设置默认目录 
            CommonParas.SysParas.setFileChooserDirectory(JFileChooser1);
            

            if (JFileChooser.APPROVE_OPTION == JFileChooser1.showSaveDialog(this))//如果文件选择完毕
            {

                String filepath = JFileChooser1.getSelectedFile().getPath();//获取被选择文件的路径
                File file = JFileChooser1.getSelectedFile();
                if (file.exists()){
                    int copy = JOptionPane.showConfirmDialog(null,sOverwrite, sSave, 
                            JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);     // "是否要覆盖当前文件？" "保存"
                    if (copy == JOptionPane.NO_OPTION) return;
                }else filepath = filepath + ".bin";

                if (!CommonParas.hCNetSDK.NET_DVR_GetConfigFile(m_lUserID,filepath)){
                    CommonParas.SystemWriteErrorLog(sGetConfigFile, sAnotherName, sFileName);// "导出配置文件失败"
                    CommonParas.showErrorMessage(sGetConfigFile, sAnotherName, sFileName);// "导出配置文件失败"
                    
                }else {
                    //系统写日志（6项：操作时间、日志类型、描述信息、设备序列号、设备类型、调用的文件名，其中用户名系统自动加入，不需要在输入参数中）
                    CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, sGetConfigFile, sSerialNO , CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sConfigFileColon + filepath, sFileName);// "导出配置文件" "配置文件："
                    CommonParas.showMessage(sGetConfigFileSucc + filepath, sFileName); //"成功导出配置文件到：" 
                    //JOptionPane.showMessageDialog(this, "成功导出配置文件到：" + filepath);
                }
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jButtonSetConfigFileActionPerformed()","系统在设导出配置文件过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jButtonGetConfigFileActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed
    
/*************************************************
    类:      MyTask
    类描述:  定时器响应函数
     *************************************************/
    class MyTask extends java.util.TimerTask
    {//定时器函数 相当于c语言中的onTimer();

        @Override
        public void run()
        {
            int UpgradeStatic = CommonParas.hCNetSDK.NET_DVR_GetUpgradeState(m_lUpgradeHandle);
            int iPos = CommonParas.hCNetSDK.NET_DVR_GetUpgradeProgress(m_lUpgradeHandle);

            if (iPos > 0)
            {
                jProgressBarUpgrade.setValue(iPos);
            }
            if (UpgradeStatic == 2)
            {
                jLabelUpgradeState.setText("正在升级设备，请等待......");//
            } else
            {
                switch (UpgradeStatic)
                {
                    case -1:
                        jLabelUpgradeState.setText(sUpgradeFail);//"设备升级失败"
                        CommonParas.SystemWriteErrorLog(sUpgradeFail, sAnotherName, sFileName);//"设备升级失败"
                        break;
                    case 1:
                        jLabelUpgradeState.setText(sUpgradeSucc );//"设备升级成功"
                        jProgressBarUpgrade.setValue(100);
                        CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, sUpgrade , sSerialNO , CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);// "设备升级"
                        break;
                    case 3:
                        jLabelUpgradeState.setText(sUpgradeFail);// "设备升级失败"
                        CommonParas.SystemWriteErrorLog(sUpgradeFail, sAnotherName, sFileName);// "升级设备失败"
                        break;
                    case 4:
                        jLabelUpgradeState.setText(sNetworkDisconnect);// "网络断开,状态未知"
                        CommonParas.SystemWriteErrorLog(sNetworkDisconnect, sAnotherName, sFileName);// "网络断开,状态未知"
                        break;
                    case 5:
                        jLabelUpgradeState.setText(sUpgradeLanguageNotMatch);// "升级文件语言版本不匹配"
                        CommonParas.SystemWriteErrorLog(sUpgradeLanguageNotMatch, sAnotherName, sFileName);// "升级文件语言版本不匹配"
                        break;
                        //6- 升级写flash失败7- 升级包类型不匹配8- 升级包版本不匹配 
                    case 6:
                        jLabelUpgradeState.setText(sWriteFlashFail);// "升级写flash失败"
                        CommonParas.SystemWriteErrorLog(sWriteFlashFail, sAnotherName, sFileName);// "升级写flash失败"
                        break;
                    case 7:
                        jLabelUpgradeState.setText(sUpgradePackageNotMatch);// "升级包类型不匹配"
                        CommonParas.SystemWriteErrorLog(sUpgradePackageNotMatch, sAnotherName, sFileName);// "升级包类型不匹配"
                        break;
                    case 8:
                        jLabelUpgradeState.setText(sUpgradeVersionNotMatch);// "升级包版本不匹配"
                        CommonParas.SystemWriteErrorLog(sUpgradeVersionNotMatch, sAnotherName, sFileName);// "升级包版本不匹配"
                        break;
                    default:
                        break;
                }
                //关闭远程升级句柄，释放资源。
                if (CommonParas.hCNetSDK.NET_DVR_CloseUpgradeHandle(m_lUpgradeHandle) == true){
                    System.out.println("NET_DVR_CloseUpgradeHandle");
                }else CommonParas.SystemWriteErrorLog(CloseRemoteHandleFail, sAnotherName, sFileName);// "关闭远程升级句柄失败"
                m_lUpgradeHandle = new NativeLong(-1);
                timer.cancel();//使用这个方法退出任务
            }
        }
    }

    void openFile(String fileName)
    {
        try
        {
            File file = new File(fileName);
            int size = (int) file.length();
            int chars_read = 0;
            FileReader in = new FileReader(file);
            char[] data = new char[size];
            while (in.ready())
            {
                chars_read += in.read(data, chars_read, size - chars_read);
                //read(目标数组、文件起始位置、文件结束位置)
                //返回读入的数据量
            }
            in.close();
        } catch (IOException e)
        {
            System.out.println(e.toString());
        }
    }
    
    private boolean ifLoginSuccess(){
        if (m_lUserID.intValue() < 0)
        {
            JOptionPane.showMessageDialog(this, sSelectDeviceFirst);// "请先选择设备"
            return false;
        }else return true;
        
    }
    /**
        *函数:      initialResourceTreeModel4
        *函数描述:  初始化设备资源树
        * @return DefaultTreeModel
     */
    private DefaultTreeModel initialDevTreeModel()
    {
        m_DeviceRoot = new DefaultMutableTreeNode(sAllDevice);// "全部设备"
        DefaultTreeModel myDefaultTreeModel = new DefaultTreeModel(m_DeviceRoot);//使用根节点创建模型
        return myDefaultTreeModel;
    }
    
    /**
        * 函数:      setInvisibleItemForNonAdmin
        * 函数描述:  将超级管理员的权限部分变为不可视
    */
    private void setInvisibleItemForNonAdmin(){
        boolean IfAdminVisible = CommonParas.ifAdmin();
        
        jButtonRestoreConfig.setVisible(IfAdminVisible);
        jButtonCompleteRestore.setVisible(IfAdminVisible);
        jButtonSetConfigFile.setVisible(IfAdminVisible);
        jButtonGetConfigFile.setVisible(IfAdminVisible);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogDVRMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogDVRMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogDVRMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogDVRMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogDVRMaint dialog = new JDialogDVRMaint(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    /**
        * 函数:      modifyLocales
        * 函数描述:  根据系统语言设置窗口的控件信息和消息文本
    */
    private void modifyLocales(){
        
        if (CommonParas.SysParas.ifChinese) return;//如果是中文，则不做任何操作

        
        MyLocales Locales = CommonParas.SysParas.sysLocales;
        
        //信息显示
        sTitle                      = Locales.getString("ClassStrings", "JDialogDVRMaint.sTitle");  //设备维护
        sDVRManagement              = Locales.getString("ClassStrings", "JDialogDVRMaint.sDVRManagement");  //设备管理
        sUpgrade                    = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgrade");  //设备升级
        sUpgradeFile                = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgradeFile");  //升级文件（*.mav *.dav）
        sManagementRemind           = Locales.getString("ClassStrings", "JDialogDVRMaint.sManagementRemind");  //{0}维护
        sInvalidFile                = Locales.getString("ClassStrings", "JDialogDVRMaint.sInvalidFile");  //无效文件
        sFileIsEmpty                = Locales.getString("ClassStrings", "JDialogDVRMaint.sFileIsEmpty");  //文件为空
        sRealReboot                 = Locales.getString("ClassStrings", "JDialogDVRMaint.sRealReboot");  //确定重启设备?
        sReboot                     = Locales.getString("ClassStrings", "JDialogDVRMaint.sReboot");  //重启
        sDVRRebootFail              = Locales.getString("ClassStrings", "JDialogDVRMaint.sDVRRebootFail");  //设备重启失败
        sDVRRebootSucc              = Locales.getString("ClassStrings", "JDialogDVRMaint.sDVRRebootSucc");  //设备重启成功
        sDVRReboot                  = Locales.getString("ClassStrings", "JDialogDVRMaint.sDVRReboot");  //设备重启
        sRealRestoreConfig          = Locales.getString("ClassStrings", "JDialogDVRMaint.sRealRestoreConfig");  //确定恢复默认参数?
        sRestoreConfig              = Locales.getString("ClassStrings", "JDialogDVRMaint.sRestoreConfig");  //恢复默认参数
        sRestoreConfigFail          = Locales.getString("ClassStrings", "JDialogDVRMaint.sRestoreConfigFail");  //恢复默认参数失败
        sRestoreConfigSucc          = Locales.getString("ClassStrings", "JDialogDVRMaint.sRestoreConfigSucc");  //成功恢复默认参数
        sRealCompleteRestore        = Locales.getString("ClassStrings", "JDialogDVRMaint.sRealCompleteRestore");  //确定完全恢复默认参数?
        sCompleteRestore            = Locales.getString("ClassStrings", "JDialogDVRMaint.sCompleteRestore");  //完全恢复默认参数
        sCompleteRestoreSucc        = Locales.getString("ClassStrings", "JDialogDVRMaint.sCompleteRestoreSucc");  //成功完全恢复默认参数
        sCompleteRestoreFail        = Locales.getString("ClassStrings", "JDialogDVRMaint.sCompleteRestoreFail");  //完全恢复默认参数失败
        sConfigFile                 = Locales.getString("ClassStrings", "JDialogDVRMaint.sConfigFile");  //配置文件（*.bin）
        sConfigFileColon            = Locales.getString("ClassStrings", "JDialogDVRMaint.sConfigFileColon");  //配置文件：
        sSetConfigFile              = Locales.getString("ClassStrings", "JDialogDVRMaint.sSetConfigFile");  //导入配置文件
        sSetConfigFileFail          = Locales.getString("ClassStrings", "JDialogDVRMaint.sSetConfigFileFail");  //导入配置文件失败
        sSetConfigFileSucc          = Locales.getString("ClassStrings", "JDialogDVRMaint.sSetConfigFileSucc");  //成功导入配置文件：
        sOverwrite                  = Locales.getString("ClassStrings", "JDialogDVRMaint.sOverwrite");  //是否要覆盖当前文件？
        sSave                       = Locales.getString("ClassStrings", "JDialogDVRMaint.sSave");  //保存
        sGetConfigFile              = Locales.getString("ClassStrings", "JDialogDVRMaint.sGetConfigFile");  //导出配置文件
        sGetConfigFileFail          = Locales.getString("ClassStrings", "JDialogDVRMaint.sGetConfigFileFail");  //导出配置文件失败
        sGetConfigFileSucc          = Locales.getString("ClassStrings", "JDialogDVRMaint.sGetConfigFileSucc");  //成功导出配置文件到：
        sUpgradeStating             = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgradeStating");  //正在升级设备，请等待......
        sUpgradeFail                = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgradeFail");  //设备升级失败
        sUpgradeSucc                = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgradeSucc");  //设备升级成功
        sNetworkDisconnect          = Locales.getString("ClassStrings", "JDialogDVRMaint.sNetworkDisconnect");  //网络断开,状态未知
        sUpgradeLanguageNotMatch    = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgradeLanguageNotMatch");  //升级文件语言版本不匹配
        sWriteFlashFail             = Locales.getString("ClassStrings", "JDialogDVRMaint.sWriteFlashFail");  //升级写flash失败
        sUpgradePackageNotMatch     = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgradePackageNotMatch");  //升级包类型不匹配
        sUpgradeVersionNotMatch     = Locales.getString("ClassStrings", "JDialogDVRMaint.sUpgradeVersionNotMatch");  //升级包版本不匹配
        CloseRemoteHandleFail       = Locales.getString("ClassStrings", "JDialogDVRMaint.CloseRemoteHandleFail");  //关闭远程升级句柄失败
        sSelectDeviceFirst          = Locales.getString("ClassStrings", "JDialogDVRMaint.sSelectDeviceFirst");  //请先选择设备
        sAllDevice                  = Locales.getString("ClassStrings", "JDialogDVRMaint.sAllDevice");  //全部设备



        //标签和按钮显示
        jLabelUpgradeTitle  .setText( Locales.getString("ClassStrings", "JDialogDVRMaint.jLabelUpgradeTitle"));  //状态：
        jButtonUpgrade      .setText( Locales.getString("ClassStrings", "JDialogDVRMaint.jButtonUpgrade"));  //升级
        jLabelUpgradeFile   .setText( Locales.getString("ClassStrings", "JDialogDVRMaint.jLabelUpgradeFile"));  //升级文件Upgrade File
        this.setTitle(sTitle);
        jButtonReboot.setText(sReboot);  //重  启
        jButtonRestoreConfig.setText(sRestoreConfig);  //恢复默认参数
        jButtonCompleteRestore.setText(sCompleteRestore);  //完全恢复默认参数
        jButtonSetConfigFile.setText(sSetConfigFile);  //导入配置文件
        jButtonGetConfigFile.setText(sGetConfigFile);  //导出配置文件
        jLabelUpgradeFile.setText(sUpgradeFile);  //升级文件
        
        jLabelRemind.setText(sTitle);
        jLabelTitle.setText(sTitle);
        ((TitledBorder)jPanelDVRManagement.getBorder()).setTitle( sDVRManagement);//设备管理
        ((TitledBorder)jPanelUpgrade.getBorder()).setTitle( sUpgrade);//设备管理
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonCompleteRestore;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonGetConfigFile;
    private javax.swing.JButton jButtonReboot;
    private javax.swing.JButton jButtonRestoreConfig;
    private javax.swing.JButton jButtonSetConfigFile;
    private javax.swing.JButton jButtonUpgrade;
    private javax.swing.JLabel jLabelRemind;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JLabel jLabelUpgradeFile;
    private javax.swing.JLabel jLabelUpgradeState;
    private javax.swing.JLabel jLabelUpgradeTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelContainer;
    private javax.swing.JPanel jPanelDVRManagement;
    private javax.swing.JPanel jPanelFirst;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelUpgrade;
    private javax.swing.JProgressBar jProgressBarUpgrade;
    private javax.swing.JScrollPane jScrollPaneTree;
    private javax.swing.JSplitPane jSplitPaneDVRMaint;
    private javax.swing.JTextField jTextFieldFileDir;
    private javax.swing.JTree jTreeDev;
    // End of variables declaration//GEN-END:variables

    private String sTitle = "设备维护";
    private String sDVRManagement = "设备管理";
    private String sUpgrade = "设备升级";
    private String sUpgradeFile = "升级文件（*.mav *.dav）";
    private String sManagementRemind = "{0}维护";
    private String sInvalidFile = "无效文件";
    private String sFileIsEmpty = "文件为空";
    private String sRealReboot = "确定重启设备?";
    private String sReboot = "重启";
    private String sDVRRebootFail = "设备重启失败";
    private String sDVRRebootSucc = "设备重启成功";
    private String sDVRReboot = "设备重启";
    private String sRealRestoreConfig = "确定恢复默认参数?";
    private String sRestoreConfig = "恢复默认参数";
    private String sRestoreConfigFail = "恢复默认参数失败";
    private String sRestoreConfigSucc = "成功恢复默认参数";
    private String sRealCompleteRestore = "确定完全恢复默认参数?";
    private String sCompleteRestore = "完全恢复默认参数";
    private String sCompleteRestoreSucc = "成功完全恢复默认参数";
    private String sCompleteRestoreFail = "完全恢复默认参数失败";
    private String sConfigFile = "配置文件（*.bin）";
    private String sConfigFileColon = "配置文件：";
    private String sSetConfigFile = "导入配置文件";
    private String sSetConfigFileFail = "导入配置文件失败";
    private String sSetConfigFileSucc = "成功导入配置文件：";
    private String sOverwrite = "是否要覆盖当前文件？";
    private String sSave = "保存";
    private String sGetConfigFile = "导出配置文件";
    private String sGetConfigFileFail = "导出配置文件失败";
    private String sGetConfigFileSucc = "成功导出配置文件到：";
    private String sUpgradeStating = "正在升级设备，请等待......";
    private String sUpgradeFail = "设备升级失败";
    private String sUpgradeSucc = "设备升级成功";
    private String sNetworkDisconnect = "网络断开,状态未知";
    private String sUpgradeLanguageNotMatch = "升级文件语言版本不匹配";
    private String sWriteFlashFail = "升级写flash失败";
    private String sUpgradePackageNotMatch = "升级包类型不匹配";
    private String sUpgradeVersionNotMatch = "升级包版本不匹配";
    private String CloseRemoteHandleFail = "关闭远程升级句柄失败";
    private String sSelectDeviceFirst = "请先选择设备";
    private String sAllDevice = "全部设备";

}
