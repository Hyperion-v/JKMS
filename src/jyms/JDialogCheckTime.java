/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;

import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.tree.DefaultMutableTreeNode;
import jyms.data.DeviceParaBean;
import jyms.data.TxtLogger;
import jyms.tools.CheckListItemC.*;
import jyms.tools.DateChooserJButtonE;
import jyms.ui.PanelUI_LineBorder;
import jyms.ui.PanelUI_MatteBorder;
import jyms.ui.ScrollBarUI_White;
import jyms.ui.ScrollPaneUI_White;
import jyms.ui.SplitPaneUI_White;

/**
 *
 * @author John
 */
public class JDialogCheckTime extends javax.swing.JDialog {

    private final String sFileName = this.getClass().getName() + ".java";
    private DefaultMutableTreeNode m_DeviceRoot;//通道树根节点
    private DateChooserJButtonE dateChooserJButton;
    
    private String sAnotherName = "";
    private HCNetSDK.NET_DVR_TIME strCurTime = new HCNetSDK.NET_DVR_TIME();
    private ArrayList<CheckListItem> listDev = new ArrayList<>();//报警输出通道checkbox对应值
    private DefaultListModel listModelDev;
    /**
     * Creates new form JDialogCheckTime
     * @param parent
     * @param modal
     */
    public JDialogCheckTime(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try{
            modifyLocales();
            //CommonParas.CreateResourceTree(jTreeDev, m_DeviceRoot,"", sFileName);//监控设备
            CheckListItemRenderer checkListItemRenderer = new CheckListItemRenderer();
            jListDev.setCellRenderer(checkListItemRenderer);
            jListDev.addMouseListener(new CheckListMouseListener());

            listModelDev = new DefaultListModel();
            jListDev.setModel(listModelDev);

            listDev.clear();
            listModelDev.clear();
            for (int i = 0; i < CommonParas.g_listDeviceDetailPara.size(); i++)
            {
                ArrayList NewList = (ArrayList)CommonParas.g_listDeviceDetailPara.get(i);
                CheckListItem checkListItem = new CheckListItem(false, ((DeviceParaBean)NewList.get(0)).getAnothername());
                listDev.add(checkListItem);
                listModelDev.addElement(checkListItem);    // 添加设备别名
            }

            jSplitPaneCheckTime.setDividerLocation(160);
            jPanelSetTime.setLayout(new BorderLayout(1, 1));
            dateChooserJButton = new DateChooserJButtonE(); 
            jPanelSetTime.add(dateChooserJButton.getDateChooser());
            
            //自定义UI
            jPanelContainer.setUI(new PanelUI_MatteBorder());
            jSplitPaneCheckTime.setUI(new SplitPaneUI_White());
            jPanelTool.setUI(new PanelUI_LineBorder());
  
        
            jScrollPane1.setUI(new ScrollPaneUI_White());
            jScrollPane1.getVerticalScrollBar().setUI(new ScrollBarUI_White());
            jScrollPane1.getHorizontalScrollBar().setUI(new ScrollBarUI_White());

            CommonParas.setJButtonUnDecorated(jButtonExit);

        }catch (Exception e){
            TxtLogger.append(sFileName, "JDialogCheckTime()","系统在打开设备校时窗口过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFirst = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jPanelContainer = new javax.swing.JPanel();
        jSplitPaneCheckTime = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDev = new javax.swing.JList<>();
        jPanelRight = new javax.swing.JPanel();
        jPanelTool = new javax.swing.JPanel();
        jButtonCheckTime = new javax.swing.JButton();
        jButtonCheckTimeAll = new javax.swing.JButton();
        jCheckBoxEnable = new javax.swing.JCheckBox();
        jPanelSetTime = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("设备校时");
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(786, 509));

        jLabelTitle.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("设备校时");

        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/close.png"))); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFirstLayout = new javax.swing.GroupLayout(jPanelFirst);
        jPanelFirst.setLayout(jPanelFirstLayout);
        jPanelFirstLayout.setHorizontalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFirstLayout.createSequentialGroup()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelFirstLayout.setVerticalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFirstLayout.createSequentialGroup()
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelFirst, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jListDev.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jListDev.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListDev);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPaneCheckTime.setLeftComponent(jPanel2);

        jPanelRight.setLayout(new java.awt.BorderLayout());

        jButtonCheckTime.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonCheckTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/checktime2.png"))); // NOI18N
        jButtonCheckTime.setText("设备校时");
        jButtonCheckTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckTimeActionPerformed(evt);
            }
        });

        jButtonCheckTimeAll.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonCheckTimeAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/checktimeall.png"))); // NOI18N
        jButtonCheckTimeAll.setText("全部设备校时");
        jButtonCheckTimeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckTimeAllActionPerformed(evt);
            }
        });

        jCheckBoxEnable.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxEnable.setSelected(true);
        jCheckBoxEnable.setText("手动输入校时时间");
        jCheckBoxEnable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jCheckBoxEnable.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEnableItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelToolLayout = new javax.swing.GroupLayout(jPanelTool);
        jPanelTool.setLayout(jPanelToolLayout);
        jPanelToolLayout.setHorizontalGroup(
            jPanelToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelToolLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCheckTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCheckTimeAll)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxEnable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(189, Short.MAX_VALUE))
        );
        jPanelToolLayout.setVerticalGroup(
            jPanelToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelToolLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCheckTime)
                    .addComponent(jButtonCheckTimeAll)
                    .addComponent(jCheckBoxEnable, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelRight.add(jPanelTool, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout jPanelSetTimeLayout = new javax.swing.GroupLayout(jPanelSetTime);
        jPanelSetTime.setLayout(jPanelSetTimeLayout);
        jPanelSetTimeLayout.setHorizontalGroup(
            jPanelSetTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelSetTimeLayout.setVerticalGroup(
            jPanelSetTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );

        jPanelRight.add(jPanelSetTime, java.awt.BorderLayout.CENTER);

        jSplitPaneCheckTime.setRightComponent(jPanelRight);

        javax.swing.GroupLayout jPanelContainerLayout = new javax.swing.GroupLayout(jPanelContainer);
        jPanelContainer.setLayout(jPanelContainerLayout);
        jPanelContainerLayout.setHorizontalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
            .addGroup(jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPaneCheckTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE))
        );
        jPanelContainerLayout.setVerticalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 365, Short.MAX_VALUE)
            .addGroup(jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPaneCheckTime))
        );

        getContentPane().add(jPanelContainer, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxEnableItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEnableItemStateChanged
        // TODO add your handling code here:
        //CommonParas.setJPanelAllOCXEnable(jPanelSetTime,jCheckBoxEnable.isSelected());
        if (jCheckBoxEnable.isSelected()) jPanelSetTime.setVisible(true);
        else jPanelSetTime.setVisible(false);
    }//GEN-LAST:event_jCheckBoxEnableItemStateChanged

    private void jButtonCheckTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckTimeActionPerformed
        // TODO add your handling code here:
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        setNET_DVR_TIME();
        saveSelectecDevCheckTime();
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButtonCheckTimeActionPerformed

    private void jButtonCheckTimeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckTimeAllActionPerformed
        // TODO add your handling code here:
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        setNET_DVR_TIME();
        for (int i=0;i<CommonParas.g_listDeviceDetailPara.size();i++){
            saveOneDevCheckTime(i);
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButtonCheckTimeAllActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed
    /**
        * 函数:      saveSelectecDevCheckTime
        * 函数描述:  对选择的设备进行校时
    */
    private void saveSelectecDevCheckTime(){
        for (int i=0;i<listDev.size();i++){
            if (listDev.get(i).getCheck()) {
                saveOneDevCheckTime(i);
            }
        }
    }
            
    /**
        * 函数:      saveOneDevCheckTime
        * 函数描述:  设备校时
        * @param Index  设备序号
    */
    private void saveOneDevCheckTime(int Index){
        try{
            NativeLong UserID = CommonParas.getUserID(Index, sFileName);
            strCurTime.write();
            Pointer lpPicConfig = strCurTime.getPointer();
            boolean setDVRConfigSuc = CommonParas.hCNetSDK.NET_DVR_SetDVRConfig(UserID, HCNetSDK.NET_DVR_SET_TIMECFG,
                    new NativeLong(0), lpPicConfig, strCurTime.size());
            strCurTime.read();
            String SerialNo = CommonParas.getSerialNO(listDev.get(Index).getText(), sFileName);
            if (setDVRConfigSuc != true){
                //JOptionPane.showMessageDialog(this, "设备 "+Index+" 校时失败。错误代码："+ CommonParas.hCNetSDK.NET_DVR_GetLastError());
                CommonParas.SystemWriteErrorLog("", listDev.get(Index).getText(),  sCheckTimeFail,  SerialNo,  CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE,  sFileName);//"设备校时失败"
                CommonParas.showErrorMessage(sCheckTimeFail, listDev.get(Index).getText(), sFileName);//"设备校时失败"
            } else {
                //操作时间、日志类型、描述信息、设备序列号、设备类型、调用的文件名
                CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, sCheckTime, SerialNo, CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);//"设备校时"
                //JOptionPane.showMessageDialog(this, "设备 "+listDev.get(Index).getText()+" 校时成功");
                CommonParas.showMessage(MessageFormat.format(sCheckTimeSucc , listDev.get(Index).getText()), sFileName);//"设备 "+listDev.get(Index).getText()+" 校时成功"
            }
        }catch (Exception e){
            TxtLogger.append(sFileName, "saveOneDevCheckTime()","系统在设备校时过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }
    
    /**
        * 函数:      setNET_DVR_TIME
        * 函数描述:  设置校时结构参数
    */
    private void setNET_DVR_TIME(){
        
        if (jCheckBoxEnable.isSelected()){
            String sDate = dateChooserJButton.getDefaultDateText();//.getText();
            strCurTime.dwYear = Integer.parseInt(sDate.substring(0, 4));//开始时间
            strCurTime.dwMonth = Integer.parseInt(sDate.substring(5, 7));
            strCurTime.dwDay = Integer.parseInt(sDate.substring(8, 10));
            strCurTime.dwHour = Integer.parseInt(sDate.substring(11, 13));
            strCurTime.dwMinute = Integer.parseInt(sDate.substring(14, 16));
            strCurTime.dwSecond = Integer.parseInt(sDate.substring(17, 19));
        }else{
            Calendar c = Calendar.getInstance(); 
            c.setTime(new Date());
            
            strCurTime.dwYear = c.get(Calendar.YEAR);  
            strCurTime.dwMonth = c.get(Calendar.MONTH) + 1;  
            strCurTime.dwDay = c.get(Calendar.DAY_OF_MONTH); 
            strCurTime.dwHour = c.get(Calendar.HOUR_OF_DAY);  
            strCurTime.dwMinute = c.get(Calendar.MINUTE);  
            strCurTime.dwSecond = c.get(Calendar.SECOND); 
        }
    }
//    /**
//        *函数:      initialResourceTreeModel4
//        *函数描述:  初始化设备资源树
//        * @return DefaultTreeModel
//     */
//    private DefaultTreeModel initialDevTreeModel()
//    {
//        m_DeviceRoot = new DefaultMutableTreeNode("校时设备");
//        DefaultTreeModel myDefaultTreeModel = new DefaultTreeModel(m_DeviceRoot);//使用根节点创建模型
//        return myDefaultTreeModel;
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogCheckTime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogCheckTime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogCheckTime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogCheckTime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogCheckTime dialog = new JDialogCheckTime(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheckTime;
    private javax.swing.JButton jButtonCheckTimeAll;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JCheckBox jCheckBoxEnable;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JList<String> jListDev;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelContainer;
    private javax.swing.JPanel jPanelFirst;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelSetTime;
    private javax.swing.JPanel jPanelTool;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPaneCheckTime;
    // End of variables declaration//GEN-END:variables

    /**
        * 函数:      modifyLocales
        * 函数描述:  根据系统语言设置窗口的控件信息和消息文本
    */
    private void modifyLocales(){
        
        if (CommonParas.SysParas.ifChinese) return;//如果是中文，则不做任何操作

        
        MyLocales Locales = CommonParas.SysParas.sysLocales;
        
        //信息显示
        sCheckTime       = Locales.getString("ClassStrings", "JDialogCheckTime.sCheckTime");  //设备校时
        sCheckTimeFail   = Locales.getString("ClassStrings", "JDialogCheckTime.sCheckTimeFail");  //设备校时失败
        sCheckTimeSucc   = Locales.getString("ClassStrings", "JDialogCheckTime.sCheckTimeSucc");  //设备 “{0}” 校时成功

        //标签和按钮显示
        this.setTitle(sCheckTime);
        jLabelTitle.setText(sCheckTime);
        jButtonCheckTime.setText(      Locales.getString("ClassStrings", "JDialogCheckTime.jButtonCheckTime"));  //设备校时
        jButtonCheckTimeAll.setText(   Locales.getString("ClassStrings", "JDialogCheckTime.jButtonCheckTimeAll"));  //全部设备校时
        jCheckBoxEnable.setText(       Locales.getString("ClassStrings", "JDialogCheckTime.jCheckBoxEnable"));  //手动输入校时时间

    }
    private String sCheckTime = "设备校时";
    private String sCheckTimeFail = "设备校时失败";
    private String sCheckTimeSucc = "设备 {0} 校时成功";
}
