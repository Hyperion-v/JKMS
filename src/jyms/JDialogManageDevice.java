/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;

import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import jyms.data.DeviceGroupBean;
import jyms.data.DeviceParaBean;
import jyms.data.TxtLogger;

/**
 *
 * @author John
 */
public class JDialogManageDevice extends javax.swing.JDialog {
    
    private final String sFileName = this.getClass().getName() + ".java";
    private int iInsertOrUpdate;
    private String sSerialNO;
    private String sAnotherName;
    private String sDVRIP;
    private String sServerPort;
    private String sDVRType;
    private String sUserName;
    private String sPassword;
    private int iState = 0 ;
    private HCNetSDK.NET_DVR_DEVICEINFO_V30 m_strDeviceInfo;
    private NativeLong lUserID;
    
    private ArrayList listIPDevParas = new ArrayList();
    //JFrameDeviceManage jFrameDeviceManage;
    /**
     * Creates new form JDialogAddDevice
     * @param parent
     */
    /**
        * 函数:      构造函数JDialogLoginDevice
        * 函数描述：  根据传递的参数进行设备参数的修改
        * @param parent 显示该对话框的 Frame
        * @param modal  指定对话框在显示时是否阻塞用户向其他顶层窗口输入
        * @param iInsertOrUpdate   在该窗口进行的操作，是向数据库插入还是修改数据。0不进行数据库操作；
        *                           1在线设备插入数据；2管理设备表插入数据；3管理设备修改数据
        * @param AnotherName	设备别名
        * @param DVRIP        设备IP
        * @param ServerPort	设备端口号
        * @param UserName	设备用户名
        * @param SerialNO 设备序列号
        * @param DVRType 设备类型
     */
    public JDialogManageDevice(java.awt.Frame parent, boolean modal, int iInsertOrUpdate, String AnotherName,String DVRIP,String ServerPort,String UserName,String SerialNO,String DVRType) {
        super(parent, modal);
        initComponents();
        modifyLocales();
        //jFrameDeviceManage = (JFrameDeviceManage)parent;
        jTextFieldAnotherName.setText(AnotherName);
        jTextFieldDVRIP.setText(DVRIP);
        if (ServerPort != null){
            if (!ServerPort.equals("8000") && !ServerPort.equals("")){
                    jTextFieldServerPort.setText(ServerPort);
            }
        } 
//        jTextFieldUserName.setText(sUserName);
        this.iInsertOrUpdate = iInsertOrUpdate;
        this.sSerialNO = SerialNO;
        this.sDVRType = DVRType;
        this.sAnotherName = AnotherName;
        this.sDVRIP = DVRIP;
        if (iInsertOrUpdate == 1) {
            jTextFieldDVRIP.setEditable(false);
            jLabelTitle.setText(sTitleLogin);// "设备注册"
        }
        if (iInsertOrUpdate == 2) jLabelTitle.setText(sTitleLogin);// "设备注册"
        if (iInsertOrUpdate == 3) {
            jButtonLogin.setText(sSave);// "保存"
            jLabelTitle.setText(sTitleModify);// "已注册设备参数修改"
        }
        CommonParas.setJButtonUnDecorated(jButtonExit);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldPassword = new javax.swing.JTextField();
        jPanelFirst = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jPanelCenter = new javax.swing.JPanel();
        jLabelAnotherName = new javax.swing.JLabel();
        jTextFieldAnotherName = new javax.swing.JTextField();
        jLabelIP = new javax.swing.JLabel();
        jTextFieldDVRIP = new javax.swing.JTextField();
        jTextFieldServerPort = new javax.swing.JTextField();
        jLabelPort = new javax.swing.JLabel();
        jLabelDevPass = new javax.swing.JLabel();
        jLabelDevUser = new javax.swing.JLabel();
        jTextFieldUserName = new javax.swing.JTextField();
        jPasswordFieldDVR = new javax.swing.JPasswordField();
        jPanelLast = new javax.swing.JPanel();
        jButtonLogin = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        jTextFieldPassword.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jLabelTitle.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("设备注册");

        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/close.png"))); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFirstLayout = new javax.swing.GroupLayout(jPanelFirst);
        jPanelFirst.setLayout(jPanelFirstLayout);
        jPanelFirstLayout.setHorizontalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFirstLayout.createSequentialGroup()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelFirstLayout.setVerticalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFirstLayout.createSequentialGroup()
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
            .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelFirst, java.awt.BorderLayout.PAGE_START);

        jLabelAnotherName.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelAnotherName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelAnotherName.setText("别名：");

        jTextFieldAnotherName.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTextFieldAnotherName.setToolTipText("");

        jLabelIP.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelIP.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelIP.setText("IP地址：");
        jLabelIP.setToolTipText("");

        jTextFieldDVRIP.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTextFieldDVRIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldDVRIPKeyTyped(evt);
            }
        });

        jTextFieldServerPort.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTextFieldServerPort.setText("8000");
        jTextFieldServerPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldServerPortKeyTyped(evt);
            }
        });

        jLabelPort.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelPort.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPort.setText("端口号：");

        jLabelDevPass.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelDevPass.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDevPass.setText("设备密码：");

        jLabelDevUser.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelDevUser.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDevUser.setText("设备用户名：");

        jTextFieldUserName.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTextFieldUserName.setText("admin");

        javax.swing.GroupLayout jPanelCenterLayout = new javax.swing.GroupLayout(jPanelCenter);
        jPanelCenter.setLayout(jPanelCenterLayout);
        jPanelCenterLayout.setHorizontalGroup(
            jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCenterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelAnotherName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelIP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelDevUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jLabelPort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelDevPass, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldServerPort)
                    .addComponent(jTextFieldUserName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(jTextFieldDVRIP)
                    .addComponent(jTextFieldAnotherName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPasswordFieldDVR))
                .addGap(35, 35, 35))
        );
        jPanelCenterLayout.setVerticalGroup(
            jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCenterLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAnotherName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAnotherName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIP)
                    .addComponent(jTextFieldDVRIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPort, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDevUser, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDevPass)
                    .addComponent(jPasswordFieldDVR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelCenterLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPasswordFieldDVR, jTextFieldAnotherName, jTextFieldDVRIP, jTextFieldServerPort, jTextFieldUserName});

        jPanelCenterLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabelAnotherName, jLabelDevPass, jLabelDevUser, jLabelIP, jLabelPort});

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jButtonLogin.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/devadd.png"))); // NOI18N
        jButtonLogin.setText("注册");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/cancel2.png"))); // NOI18N
        jButtonCancel.setText("取消");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLastLayout = new javax.swing.GroupLayout(jPanelLast);
        jPanelLast.setLayout(jPanelLastLayout);
        jPanelLastLayout.setHorizontalGroup(
            jPanelLastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLastLayout.createSequentialGroup()
                .addContainerGap(206, Short.MAX_VALUE)
                .addComponent(jButtonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancel)
                .addGap(49, 49, 49))
        );

        jPanelLastLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonCancel, jButtonLogin});

        jPanelLastLayout.setVerticalGroup(
            jPanelLastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLastLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLogin)
                    .addComponent(jButtonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanelLast, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public int getReturnStatus(){
       return iState;
    }
    public HCNetSDK.NET_DVR_DEVICEINFO_V30 getDeviceInfo(){
       return m_strDeviceInfo;
    }
    public String getAnotherName(){
       return sAnotherName;
    }
    public String getPassword(){
       return sPassword;
    }
    public String getUserName(){
       return sUserName;
    } 
    public String getDVRIP(){
       return sDVRIP;
    }
    public String getServerPort(){
       return sServerPort;
    }
    public String getSerialNO(){
       return sSerialNO;
    }
    public NativeLong getUserID(){
       return lUserID;
    }

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        // TODO add your handling code here:
        try{
            String AnotherName = jTextFieldAnotherName.getText().trim();//设备别名
            String DVRIP = jTextFieldDVRIP.getText().trim();//设备IP地址
            this.sServerPort = jTextFieldServerPort.getText().trim();//设备端口号
            this.sUserName = jTextFieldUserName.getText().trim();//设备用户名
            //this.sPassword = jTextFieldPassword.getText();//设备密码
            this.sPassword = new String(jPasswordFieldDVR.getPassword());

            if (AnotherName == null || AnotherName.equals("")){
                String toolTipText = jTextFieldAnotherName.getToolTipText();
                showMessage(sDeviceNameCannotEmpty);// "设备别名不能为空！"
                return;
            }else {
                
                if (AnotherName.length() > DeviceParaBean.ANOTHERNAME_LENGTH){
                    String AnotherNameLabel = jLabelAnotherName.getText();
                    AnotherNameLabel = AnotherNameLabel.substring(0, AnotherNameLabel.length()-1);
                    JOptionPane.showMessageDialog(null, MessageFormat.format(CommonParas.sLengthCannotExceed, AnotherNameLabel, DeviceParaBean.ANOTHERNAME_LENGTH));// "设备别名长度不能超过20！"
                    return;
                }
                String Rules = CommonParas.DVRResourceType.ifFitRules(AnotherName);
                if (!Rules.equals("")) {
                    JOptionPane.showMessageDialog(null, MessageFormat.format(sDeviceNameCannotContain , Rules));//"设备别名不能包括“" + Rules + "”！"
                    return;
                }
            }

            if (DVRIP == null || DVRIP.equals("")){
                JOptionPane.showMessageDialog(null, sDeviceIPCannotEmpty);// "设备IP地址不能为空！"
                return;
            }

            if (sServerPort == null || sServerPort.equals("")){
                JOptionPane.showMessageDialog(null, sDevicePortCannotEmpty);// "设备端口号不能为空！"
                return;
            }
            if (sUserName == null || sUserName.equals("")){
                JOptionPane.showMessageDialog(null, sDeviceUserCannotEmpty);// "设备用户名不能为空！"
                return;
            }
            if (sPassword == null || sPassword.equals("")){
                JOptionPane.showMessageDialog(null, sDevicePassCannotEmpty);// "设备密码不能为空！"
                return;
            }
            /**
                * 当iInsertOrUpdate =  1在线设备插入数据；
                *                      2管理设备表插入数据；   时
                * 都需要判断别名是否已经存在；
                * 都需要连接设备判断输入的参数是否正确。
                * 当iInsertOrUpdate =  2管理设备表插入数据；   时
                * 还需要判断是否存在新地址冲突；
                * 需要判读是否存在已经被管理的问题；此时的序列号不是从列表中读取的，而是从SDK函数连接设备后读取的。因此必须在连接成功后再判断是否已经被管理。
            */

            if (iInsertOrUpdate == 1 || iInsertOrUpdate == 2){
                //判断别名是否已经存在；
                if (DeviceParaBean.getIfExistTheAnothername(AnotherName, sFileName)){
                    JOptionPane.showMessageDialog(jTextFieldAnotherName, sDeviceNameExists);// "设备别名已经存在！"
                    return;
                }
            }
            if (iInsertOrUpdate == 2){
                if (CommonParas.getIfIPConflict(DVRIP,sFileName)) {
                    JOptionPane.showMessageDialog(rootPane, sIPConflict);// "此设备存在地址冲突！"
                    return;
                }

            }
            /**
                * 当iInsertOrUpdate =  3管理设备修改数据 时
                * 需要判断修改后的新别名是否已经存在（如果新的别名和旧别名相同，则不需要判断）；
                * 还需要判断修改后的新地址是否存在冲突（如果新的地址和旧地址相同，则不需要判断）；
                * 需要连接设备判断输入的参数是否正确。
            */
            if (iInsertOrUpdate == 3){
                if (!this.sAnotherName.equals(AnotherName)){
                    if (DeviceParaBean.getIfExistTheAnothername(AnotherName, sFileName)){
                        JOptionPane.showMessageDialog(jTextFieldAnotherName, sDeviceNameExists);// "设备别名已经存在！"
                        return;
                    }
                }
                if (!this.sDVRIP.equals(DVRIP)){
                    if (CommonParas.getIfIPConflict(DVRIP,sFileName)) {
                        JOptionPane.showMessageDialog(rootPane, sIPConflict);// "此设备存在地址冲突！"
                        return;
                    }
                }
            }
            //给别名和IP地址赋最新的值
            this.sAnotherName = AnotherName;
            this.sDVRIP = DVRIP;

            //m_strDeviceInfo = new HCNetSDK.NET_DVR_DEVICEINFO_V30();
            int iPort = Integer.parseInt(sServerPort);
           
            //lUserID = CommonParas.hCNetSDK.NET_DVR_Login_V30(sDVRIP, (short) iPort, sUserName, sPassword, m_strDeviceInfo);
            HCNetSDK.NET_DVR_DEVICEINFO_V40 StrDeviceInfo40 = new HCNetSDK.NET_DVR_DEVICEINFO_V40();
            lUserID = HCNetSDKExpand.NET_DVR_Login_V40(sDVRIP, (short) iPort, sUserName, sPassword, StrDeviceInfo40, sFileName);

            if (lUserID.intValue() == -1){
                CommonParas.showErrorMessage( sDeviceConnectFail, sAnotherName, sFileName);// "设备连接失败！"
                return;
            }
            
            m_strDeviceInfo = StrDeviceInfo40.struDeviceV30;
            
            //2管理设备表插入数据；此时的序列号不是从列表中读取的，而是从SDK函数连接设备后读取的
            if (iInsertOrUpdate == 2){
                sSerialNO = new String(m_strDeviceInfo.sSerialNumber).trim();
                if (CommonParas.getIfManaged(sSerialNO,sFileName)){
                    JOptionPane.showMessageDialog(rootPane, sDeviceAddedSucc);// "此设备已经添加管理！"
                    return;
                }
            }

            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            if (iInsertOrUpdate == 1 || iInsertOrUpdate == 2){
                    //获取设备的二级类型代码
                    String DVRSecondaryType = CommonParas.DVRType.getDVRSecondaryType(m_strDeviceInfo);
                    //设备还没有添加管理，g_listDeviceDetailPara中应该添加数据行

                    String[] sNodeName = new String[m_strDeviceInfo.byChanNum];
                    ArrayList<DeviceGroupBean> listDeviceGroupBean = new ArrayList<>();

                    //监控点，即编码通道，包括模拟通道和IP通道
                    IntByReference ibrBytesReturned = new IntByReference(0);//获取IP接入配置参数
                    boolean bRet = false;

                    HCNetSDK.NET_DVR_IPPARACFG m_strIpparaCfg = new HCNetSDK.NET_DVR_IPPARACFG();
                    m_strIpparaCfg.write();
                    Pointer lpIpParaConfig = m_strIpparaCfg.getPointer();
                    //通道号无效，所以设为0
                    bRet = CommonParas.hCNetSDK.NET_DVR_GetDVRConfig(lUserID, HCNetSDK.NET_DVR_GET_IPPARACFG, new NativeLong(0), lpIpParaConfig, m_strIpparaCfg.size(), ibrBytesReturned);
                    m_strIpparaCfg.read();

                    if (!bRet)
                    {
                        //前端设备只有模拟通道
                        for (int iChannum = 0; iChannum < (m_strDeviceInfo.byChanNum); iChannum++)
                        {
                            DeviceGroupBean deviceGroupBean = new DeviceGroupBean();
                            deviceGroupBean.setNodename(CommonParas.getNodeName(iChannum + m_strDeviceInfo.byStartChan, false, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE ));//"监控点_" + CommonParas.getNumberToTwoBitsStr(iChannum + m_strDeviceInfo.byStartChan));
                            deviceGroupBean.setGroupName(this.sAnotherName);
                            deviceGroupBean.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE );
                            deviceGroupBean.setSerialNO(this.sSerialNO);
                            deviceGroupBean.setsSerialNOJoin("");
                            listDeviceGroupBean.add(deviceGroupBean);
                        }
                        m_strIpparaCfg = null;//没有IP通道，将该结构设为null，因为后面还要用到该结构体
                    }else{
                        //设备支持IP通道
                        processIPDev(m_strIpparaCfg);//从m_strIpparaCfg读取接入设备的相关参数；登录设备读取器序列号参数
                        for (int iChannum = 0; iChannum < m_strDeviceInfo.byChanNum; iChannum++){
                            if(m_strIpparaCfg.byAnalogChanEnable[iChannum] == 1)
                            {
                                DeviceGroupBean deviceGroupBean = new DeviceGroupBean();
                                deviceGroupBean.setNodename(CommonParas.getNodeName(iChannum + m_strDeviceInfo.byStartChan, false, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE ));//"监控点_" + CommonParas.getNumberToTwoBitsStr(iChannum + m_strDeviceInfo.byStartChan));
                                deviceGroupBean.setGroupName(this.sAnotherName);
                                deviceGroupBean.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE );
                                deviceGroupBean.setSerialNO(this.sSerialNO);

                                listDeviceGroupBean.add(deviceGroupBean);
                            }
                        }
                        for(int iChannum =0; iChannum < HCNetSDK.MAX_IP_CHANNEL; iChannum++){
                            if (m_strIpparaCfg.struIPChanInfo[iChannum].byEnable == 1)
                            {
                                DeviceGroupBean deviceGroupBean = new DeviceGroupBean();
                                deviceGroupBean.setNodename(CommonParas.getNodeName(iChannum + m_strDeviceInfo.byStartChan, true, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE ));//"IP监控点_" + CommonParas.getNumberToTwoBitsStr(iChannum + m_strDeviceInfo.byStartChan));
                                deviceGroupBean.setGroupName(this.sAnotherName);
                                deviceGroupBean.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE );
                                deviceGroupBean.setSerialNO(this.sSerialNO);
                                byte iIPID = m_strIpparaCfg.struIPChanInfo[iChannum].byIPID;
                                String DVRIp = new String(m_strIpparaCfg.struIPDevInfo[iIPID -1].struIP.sIpV4).trim();
                                String SerialNOJoin = getSerialNoJoin(DVRIp);
                                deviceGroupBean.setsSerialNOJoin(SerialNOJoin);
                                listDeviceGroupBean.add(deviceGroupBean);
                            }
                        }

                    }

                    //报警输入资源
                    for (int j=0;j<m_strDeviceInfo.byAlarmInPortNum;j++){
                        DeviceGroupBean deviceGroupBean2 = new DeviceGroupBean();
                        deviceGroupBean2.setNodename(CommonParas.getNodeName(j+1, false, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMIN_CODE));//"报警输入_" + CommonParas.getNumberToTwoBitsStr(j+1));
                        deviceGroupBean2.setGroupName(this.sAnotherName);
                        deviceGroupBean2.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMIN_CODE);
                        deviceGroupBean2.setSerialNO(this.sSerialNO);
                        listDeviceGroupBean.add(deviceGroupBean2);
                    }
                    //报警输出资源
                    for (int j=0;j<m_strDeviceInfo.byAlarmOutPortNum;j++){
                        DeviceGroupBean deviceGroupBean3 = new DeviceGroupBean();
                        deviceGroupBean3.setNodename(CommonParas.getNodeName(j+1, false, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMOUT_CODE));//"报警输出_" + CommonParas.getNumberToTwoBitsStr(j+1));
                        deviceGroupBean3.setGroupName(this.sAnotherName);
                        deviceGroupBean3.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMOUT_CODE);
                        deviceGroupBean3.setSerialNO(this.sSerialNO);
                        listDeviceGroupBean.add(deviceGroupBean3);
                    }

                    //IP报警输入资源
                    if (bRet){
                        IntByReference ibrBytesReturned2 = new IntByReference(0);//获取IP接入配置参数
                        boolean bRetIPAlarmIn = false;

                        HCNetSDK.NET_DVR_IPALARMINCFG strIpAlarmInCfg = new HCNetSDK.NET_DVR_IPALARMINCFG();
                        strIpAlarmInCfg.write();
                        Pointer lpIpAlarmInCfg = strIpAlarmInCfg.getPointer();
                        //通道号无效，所以设为0
                        bRetIPAlarmIn = CommonParas.hCNetSDK.NET_DVR_GetDVRConfig(lUserID, HCNetSDK.NET_DVR_GET_IPALARMINCFG, new NativeLong(0), lpIpAlarmInCfg, strIpAlarmInCfg.size(), ibrBytesReturned2);
                        strIpAlarmInCfg.read();
                        if (bRetIPAlarmIn){
                            int Index = 1;
                            for (int iIPAlarmIn =0;iIPAlarmIn<HCNetSDK.MAX_IP_ALARMIN;iIPAlarmIn++){
                                int iIPID = strIpAlarmInCfg.struIPAlarmInInfo[iIPAlarmIn].byIPID;
                                if (iIPID>0){
                                    //得到当前设备ID对应的IP地址
                                    if (m_strIpparaCfg.struIPDevInfo[iIPID - 1].dwEnable > 0){
                                        String DVRIp = new String(m_strIpparaCfg.struIPDevInfo[iIPID - 1].struIP.sIpV4).trim();
                                        String SerialNOJoin = getSerialNoJoin(DVRIp);
                                        DeviceGroupBean deviceGroupBean2 = new DeviceGroupBean();
                                        deviceGroupBean2.setNodename(CommonParas.getNodeName(Index, true, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMIN_CODE));//"报警输入_" + CommonParas.getNumberToTwoBitsStr(j+1));
                                        deviceGroupBean2.setGroupName(this.sAnotherName);
                                        deviceGroupBean2.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMIN_CODE);
                                        deviceGroupBean2.setSerialNO(this.sSerialNO);
                                        deviceGroupBean2.setsSerialNOJoin(SerialNOJoin);
                                        listDeviceGroupBean.add(deviceGroupBean2);
                                        Index ++;
                                    }

                                }
                            }

                        }
                    }
                    //IP报警输出资源
                    if (bRet){
                        IntByReference ibrBytesReturned2 = new IntByReference(0);//获取IP接入配置参数
                        boolean bRetIPAlarmOut = false;

                        HCNetSDK.NET_DVR_IPALARMOUTCFG strIpAlarmOutCfg = new HCNetSDK.NET_DVR_IPALARMOUTCFG();
                        strIpAlarmOutCfg.write();
                        Pointer lpIpAlarmOutCfg = strIpAlarmOutCfg.getPointer();
                        //通道号无效，所以设为0
                        bRetIPAlarmOut = CommonParas.hCNetSDK.NET_DVR_GetDVRConfig(lUserID, HCNetSDK.NET_DVR_GET_IPALARMOUTCFG, new NativeLong(0), lpIpAlarmOutCfg, strIpAlarmOutCfg.size(), ibrBytesReturned2);
                        strIpAlarmOutCfg.read();
                        if (bRetIPAlarmOut){
                            int Index = 1;
                            for (int iIPAlarmOut =0;iIPAlarmOut<HCNetSDK.MAX_IP_ALARMOUT;iIPAlarmOut++){
                                int iIPID = strIpAlarmOutCfg.struIPAlarmOutInfo[iIPAlarmOut].byIPID;
                                if (iIPID>0){
                                    //得到当前设备ID对应的IP地址
                                    if (m_strIpparaCfg.struIPDevInfo[iIPID - 1].dwEnable > 0){
                                        String DVRIp = new String(m_strIpparaCfg.struIPDevInfo[iIPID - 1].struIP.sIpV4).trim();
                                        String SerialNOJoin = getSerialNoJoin(DVRIp);
                                        DeviceGroupBean deviceGroupBean2 = new DeviceGroupBean();
                                        deviceGroupBean2.setNodename(CommonParas.getNodeName(Index, true, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMOUT_CODE));//"报警输入_" + CommonParas.getNumberToTwoBitsStr(j+1));
                                        deviceGroupBean2.setGroupName(this.sAnotherName);
                                        deviceGroupBean2.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMOUT_CODE);
                                        deviceGroupBean2.setSerialNO(this.sSerialNO);
                                        deviceGroupBean2.setsSerialNOJoin(SerialNOJoin);
                                        listDeviceGroupBean.add(deviceGroupBean2);
                                        Index ++;
                                    }
                                }
                            }
                        }
                    }
                    //硬盘资源
                    HCNetSDK.NET_DVR_HDCFG m_struHDCfg = new HCNetSDK.NET_DVR_HDCFG();
                    m_struHDCfg.write();
                    Pointer lpPicConfig = m_struHDCfg.getPointer();
                    ibrBytesReturned = new IntByReference(0);
                    boolean getDVRConfigSuc = CommonParas.hCNetSDK.NET_DVR_GetDVRConfig(lUserID, HCNetSDK.NET_DVR_GET_HDCFG,
                            new NativeLong(0), lpPicConfig, m_struHDCfg.size(), ibrBytesReturned);
                    m_struHDCfg.read();
                    if (getDVRConfigSuc != true){
                        //System.out.println("获取硬盘信息失败");
                    } else{
                        for (int i = 0; i < m_struHDCfg.dwHDCount; i++)
                        {

                            DeviceGroupBean deviceGroupBean3 = new DeviceGroupBean();
                            deviceGroupBean3.setNodename(CommonParas.getNodeName(m_struHDCfg.struHDInfo[i].dwHDNo+1, false, CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_DISK_CODE));//"硬盘_" + CommonParas.getNumberToTwoBitsStr(j+1));
                            deviceGroupBean3.setGroupName(this.sAnotherName);
                            deviceGroupBean3.setRescourceType(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_DISK_CODE);
                            deviceGroupBean3.setSerialNO(this.sSerialNO);
                            listDeviceGroupBean.add(deviceGroupBean3);
                        }
                    }


                    DeviceParaBean deviceparaBean = new DeviceParaBean(sSerialNO,sDVRIP,sServerPort,sUserName,sPassword,sAnotherName,DVRSecondaryType);

                    if (DeviceParaBean.insertLoginDevice(listDeviceGroupBean, deviceparaBean, this.sFileName)){
                        //System.out.println("在线设备注册成功");
                        //JInFrameDeviceManage已经统一写了日志，所以注释掉
                        //CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, "添加注册设备", sSerialNO, CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);
                        iState = iInsertOrUpdate;
                        //在g_listDeviceDetailPara中添加新管理的设备
                        CommonParas.insertToDeviceDetailParaList(sSerialNO, lUserID, StrDeviceInfo40, m_strIpparaCfg, sFileName);
                        this.dispose();
                    }else {
                        //System.out.println("在线设备注册失败");
                        //JInFrameDeviceManage已经统一写了日志，所以注释掉
                        //CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, "添加注册设备失败", sSerialNO, CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);
                        iState = 0;
                        this.dispose();
                    }

            }else  if (iInsertOrUpdate == 3){
                DeviceParaBean deviceparaBean = new DeviceParaBean(sSerialNO,sDVRIP,sServerPort,sUserName,sPassword,sAnotherName);
                if (DeviceParaBean.UpdateManagedDevice(deviceparaBean, this.sFileName)){
                    //System.out.println("设备参数修改成功");
                    //JInFrameDeviceManage已经统一写了日志，所以注释掉
                    //CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, "修改设备参数", sSerialNO, CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);
                    iState = iInsertOrUpdate;
                    //修改g_listDeviceDetailPara中设备参数
                    CommonParas.setDeviceParaBean(deviceparaBean, sFileName);
                    this.dispose();
                }else {
                    //System.out.println("设备参数修改失败");
                    //JInFrameDeviceManage已经统一写了日志，所以注释掉
                    //CommonParas.SystemWriteLog("",CommonParas.LogType.LOG_OPER_CODE, "设备参数修改失败", sSerialNO, CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE, sFileName);
                    iState = 0;
                    this.dispose();
                }
            }


        }catch(HeadlessException | NumberFormatException e)
        {
            TxtLogger.append(sFileName, "jButtonLoginActionPerformed()","添加设备管理过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
       
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        iState = -1;
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jTextFieldDVRIPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDVRIPKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_DELETE || c == KeyEvent.VK_BACK_SPACE) return;
        if (!(c == '.' || c >= '0' && c <= '9')) {
            JOptionPane.showMessageDialog(rootPane, sInputErrorNumberDot);// "输入有误。输入必须是.和数字，其它字符非法！"
            evt.setKeyChar('\0');
        }
    }//GEN-LAST:event_jTextFieldDVRIPKeyTyped

    private void jTextFieldServerPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldServerPortKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_DELETE || c == KeyEvent.VK_BACK_SPACE) return;
        if (!(c >= '0' && c <= '9')) {
            JOptionPane.showMessageDialog(rootPane, sInputErrorNumber);// "输入有误。输入必须数字，其它字符非法！"
            evt.setKeyChar('\0');
        }
    }//GEN-LAST:event_jTextFieldServerPortKeyTyped

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        jButtonCancel.doClick();
    }//GEN-LAST:event_jButtonExitActionPerformed
    /**
        * 函数:      processIPDev
        * 函数描述:  从m_strIpparaCfg读取接入设备的相关参数；登录设备读取器序列号参数
    */
    private void processIPDev(HCNetSDK.NET_DVR_IPPARACFG strIpparaCfg){
        try{
            listIPDevParas.clear();
            for (int i=0;i<strIpparaCfg.struIPDevInfo.length;i++){
                if (strIpparaCfg.struIPDevInfo[i].dwEnable > 0){
                    ArrayList NewList = new ArrayList();
                    String DVRIP = new String(strIpparaCfg.struIPDevInfo[i].struIP.sIpV4).trim();
                    NewList.add(DVRIP);
                    NewList.add(strIpparaCfg.struIPDevInfo[i].wDVRPort);
                    NewList.add(new String(strIpparaCfg.struIPDevInfo[i].sUserName).trim());
                    NewList.add(new String(strIpparaCfg.struIPDevInfo[i].sPassword).trim());
                    String SerialNO = CommonParas.getSerialNOFromSADP(DVRIP);
                    if (SerialNO.equals("")) {
                        SerialNO = CommonParas.getSerialNO(DVRIP, null, sFileName);
                    }
                    NewList.add(SerialNO);
                    listIPDevParas.add(NewList);
                }
            }
        }catch(HeadlessException | NumberFormatException e)
        {
            TxtLogger.append(sFileName, "processIPDev()","在从m_strIpparaCfg读取接入设备的相关参数的过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   

        }
    }
    /**
        * 函数:      getSerialNoJoin
        * 函数描述:  从listIPDevParas获取该接入设备的序列号
    */
    private String getSerialNoJoin(String DVRIP){
        try{
            for (int i=0;i<listIPDevParas.size();i++){
                ArrayList NewList = (ArrayList)listIPDevParas.get(i);
                if (((String)NewList.get(0)).equals(DVRIP)){
                    return (String)NewList.get(4);
                }
            }
        }catch(HeadlessException | NumberFormatException e)
        {
            TxtLogger.append(sFileName, "getSerialNoJoin()","在获取接入设备序列号的过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
       
        }
        return "";
    }
    /**
        * 函数:      showMessage
        * 函数描述:  本窗口的消息函数
    */
    private void showMessage(String Msg){
        //CommonParas.showMessage( this.getRootPane(), Msg, sFileName);
        CommonParas.showMessage( Msg, sFileName);
    }
    
    /**
        * 函数:      modifyLocales
        * 函数描述:  根据系统语言设置窗口的控件信息和消息文本
    */
    private void modifyLocales(){
        
        if (CommonParas.SysParas.ifChinese) return;//如果是中文，则不做任何操作

        
        MyLocales Locales = CommonParas.SysParas.sysLocales;
        
        //信息显示
        sInputErrorNumberDot = Locales.getString("JInFrameDeviceManage", "JInFrameDeviceManage.sInputErrorNumberDot");  //输入有误。输入必须是“.”和数字，其它字符非法！
        sInputErrorNumber = Locales.getString("JInFrameDeviceManage", "JInFrameDeviceManage.sInputErrorNumber");  //输入有误。输入必须数字，其它字符非法！
        sLogin = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sLogin");  //注册
        sTitleLogin = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sTitleLogin");  //设备注册
        sSave = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sSave");  //保存
        sTitleModify = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sTitleModify");  //已注册设备参数修改
        sDeviceNameCannotEmpty = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDeviceNameCannotEmpty");  //设备别名不能为空！
        sDeviceNameCannotContain = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDeviceNameCannotContain");  //设备别名不能包括“{0}”！
        sDeviceIPCannotEmpty = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDeviceIPCannotEmpty");  //设备IP地址不能为空！
        sDevicePortCannotEmpty = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDevicePortCannotEmpty");  //设备端口号不能为空！
        sDeviceUserCannotEmpty = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDeviceUserCannotEmpty");  //设备用户名不能为空！
        sDevicePassCannotEmpty = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDevicePassCannotEmpty");  //设备密码不能为空！
        sDeviceNameExists = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDeviceNameExists");  //设备别名已经存在！
        sIPConflict = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sIPConflict");  //此设备存在地址冲突！
        sDeviceConnectFail = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDeviceConnectFail");  //设备连接失败！
        sDeviceAddedSucc = Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.sDeviceAddedSucc");  //此设备已经添加管理！
        //标签和按钮显示
        jLabelAnotherName.setText(Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.jLabelAnotherName"));  //别  名：
        jLabelIP.setText(Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.jLabelIP"));  //IP地址：
        jLabelPort.setText(Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.jLabelPort"));  //端口号：
        jLabelDevPass.setText(Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.jLabelDevPass"));  //设备密码：
        jLabelDevUser.setText(Locales.getString("JInFrameDeviceManage", "JDialogManageDevice.jLabelDevUser"));  //设备用户名：
        jButtonCancel.setText(Locales.getString("JInFrameDeviceManage", "JInFrameDeviceManage.jButtonCancel"));  //取消

        jButtonLogin.setText(sLogin);  //注册
        jLabelTitle.setText(sTitleLogin);  //设备注册
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JLabel jLabelAnotherName;
    private javax.swing.JLabel jLabelDevPass;
    private javax.swing.JLabel jLabelDevUser;
    private javax.swing.JLabel jLabelIP;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelFirst;
    private javax.swing.JPanel jPanelLast;
    private javax.swing.JPasswordField jPasswordFieldDVR;
    private javax.swing.JTextField jTextFieldAnotherName;
    private javax.swing.JTextField jTextFieldDVRIP;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldServerPort;
    private javax.swing.JTextField jTextFieldUserName;
    // End of variables declaration//GEN-END:variables

    private String sInputErrorNumberDot = "输入有误。输入必须是“.”和数字，其它字符非法！";
    private String sInputErrorNumber = "输入有误。输入必须数字，其它字符非法！";
    private String sLogin = "注册";
    private String sTitleLogin = "设备注册";
    private String sSave = "保存";
    private String sTitleModify = "已注册设备参数修改";
    private String sDeviceNameCannotEmpty = "设备别名不能为空！";
    private String sDeviceNameCannotContain = "设备别名不能包括“{0}”！";
    private String sDeviceIPCannotEmpty = "设备IP地址不能为空！";
    private String sDevicePortCannotEmpty = "设备端口号不能为空！";
    private String sDeviceUserCannotEmpty = "设备用户名不能为空！";
    private String sDevicePassCannotEmpty = "设备密码不能为空！";
    private String sDeviceNameExists = "设备别名已经存在！";
    private String sIPConflict = "此设备存在地址冲突！";
    private String sDeviceConnectFail = "设备连接失败！";
    private String sDeviceAddedSucc = "此设备已经添加管理！";
}
