/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;

import com.sun.jna.NativeLong;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.SwingWorker;
import javax.swing.table.TableColumnModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import jyms.tools.TableUtil.JTableCheckBoxModel;
import jyms.data.DeviceResourceBean;
import jyms.data.TxtLogger;
import jyms.tools.TreeUtil;
import jyms.ui.PanelUI_MatteBorder;
import jyms.ui.ScrollBarUI_White;
import jyms.ui.ScrollPaneUI_White;
import jyms.ui.SplitPaneUI_White;
import jyms.ui.TableHeaderUI_White;
import jyms.ui.TableUI_White;

/**
 *
 * @author John
 */
public class JDialogAlarmOutCtrl extends javax.swing.JDialog {
    
    private final String sFileName = this.getClass().getName() + ".java";
    private DefaultMutableTreeNode m_RootDevice;//通道树根节点
    //获取DeviceResourceBean（设备资源表中的“设备序列号”、“节点名”、“设备资源分类”、“接入设备的序列号”）-0
    //对应的“设备别名-1”、“IP地址-2”等参数，及对应的的接入设备的“设备别名-3，设备资源分类名称-4（代码表中代码名称），加上报警输出状态-5
    private ArrayList listAlarmOutPara = new ArrayList();
    private ArrayList listStrAlarmOutStatus = new ArrayList();
    private JTableCheckBoxModel  AlarmOutTableModel;
    
    private String sAnotherName = "";//存储当前的设备别名
    private String sSerialNO = "";//存储当前的设备别序列号
    
    private RefreshAlarmOutParasWorker refreshWorker;//并发进程，刷新设备报警输出状态
    private boolean bDeviceRefreshing = false;//是否正在刷新设备报警输出状态

    /**
     * Creates new form JDialogAlarmOutCtrl
     * @param parent
     */
    public JDialogAlarmOutCtrl(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        modifyLocales();
        initialDialogParas();
    }
    
    /**
	 * 函数:      initialDialogParas
         * 函数描述:  初始化窗体的各种参数
    */
    private void initialDialogParas(){
        
        jSplitPaneAlarmOut.setDividerLocation(140);
        jTreeDevice.setModel(this.initialDeviceTreeModel());
        CommonParas.CreateDeviceTree(jTreeDevice, m_RootDevice, "", sFileName);//监控设备
        
        AlarmOutTableModel = this.initialAlarmOutTableModel();
        
        jTableAlarmOut.setModel(AlarmOutTableModel);
        jTableAlarmOut.setRowHeight(30);
        setTableColWidth();
    
        jPanelContainer.setUI(new PanelUI_MatteBorder());
        jSplitPaneAlarmOut.setUI(new SplitPaneUI_White());
        
        
        jTableAlarmOut.getTableHeader().setUI(new TableHeaderUI_White());
        jTableAlarmOut.setUI(new TableUI_White());
        
        jScrollPaneAlarmOut.setUI(new ScrollPaneUI_White());//jScrollPaneAlarmOut
        jScrollPaneAlarmOut.getVerticalScrollBar().setUI(new ScrollBarUI_White());
        jScrollPaneAlarmOut.getHorizontalScrollBar().setUI(new ScrollBarUI_White());
        
        
        jScrollPaneDevice.setUI(new ScrollPaneUI_White());//jScrollPaneAlarmOut
        jScrollPaneDevice.getVerticalScrollBar().setUI(new ScrollBarUI_White());
        jScrollPaneDevice.getHorizontalScrollBar().setUI(new ScrollBarUI_White());
 
//            jPanelImportIn.setUI(new PanelUI_LineBorder());
//            jPanelImportOut.setUI(new PanelUI_LineBorder());
        CommonParas.setJButtonUnDecorated(jButtonExit);
        
        jTreeDevice.setCellRenderer(new TreeUtil.CustomNodeTreeCellRenderer());
        
        //刷新设备报警输出状态
        refreshWorker = new RefreshAlarmOutParasWorker();
        refreshWorker.execute();
//        initialListAlarmOutParas();
//        fillIntoTableAlarmOut("");//添加全部报警输出
        //AlarmOutTableModel.addTableModelListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFirst = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jPanelContainer = new javax.swing.JPanel();
        jSplitPaneAlarmOut = new javax.swing.JSplitPane();
        jScrollPaneDevice = new javax.swing.JScrollPane();
        jTreeDevice = new javax.swing.JTree();
        jScrollPaneAlarmOut = new javax.swing.JScrollPane();
        jTableAlarmOut = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("报警输出控制");
        setUndecorated(true);

        jLabelTitle.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("报警输出控制");

        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/close.png"))); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFirstLayout = new javax.swing.GroupLayout(jPanelFirst);
        jPanelFirst.setLayout(jPanelFirstLayout);
        jPanelFirstLayout.setHorizontalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFirstLayout.createSequentialGroup()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelFirstLayout.setVerticalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFirstLayout.createSequentialGroup()
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelFirst, java.awt.BorderLayout.PAGE_START);

        jTreeDevice.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTreeDevice.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeDeviceValueChanged(evt);
            }
        });
        jScrollPaneDevice.setViewportView(jTreeDevice);

        jSplitPaneAlarmOut.setLeftComponent(jScrollPaneDevice);

        jTableAlarmOut.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableAlarmOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAlarmOutMouseClicked(evt);
            }
        });
        jScrollPaneAlarmOut.setViewportView(jTableAlarmOut);

        jSplitPaneAlarmOut.setRightComponent(jScrollPaneAlarmOut);

        javax.swing.GroupLayout jPanelContainerLayout = new javax.swing.GroupLayout(jPanelContainer);
        jPanelContainer.setLayout(jPanelContainerLayout);
        jPanelContainerLayout.setHorizontalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 826, Short.MAX_VALUE)
            .addGroup(jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPaneAlarmOut, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE))
        );
        jPanelContainerLayout.setVerticalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
            .addGroup(jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPaneAlarmOut, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
        );

        getContentPane().add(jPanelContainer, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeDeviceValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeDeviceValueChanged
        // TODO add your handling code here:
        try {
            DefaultMutableTreeNode selectionNode = (DefaultMutableTreeNode) jTreeDevice.getLastSelectedPathComponent();
            String nodeName = selectionNode.toString();
            // 判断是否为树叶节点，若是则读取设备通道录像参数，若不是则不做任何事。
            if (selectionNode == null) return;
            if (selectionNode !=null && !selectionNode.isLeaf()) {
                nodeName = "";
            }
            refreshTableAlarmOut(nodeName);//刷新报警输出信息
            
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "jTreeDeviceValueChanged()","系统在读取设备报警参数过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }//GEN-LAST:event_jTreeDeviceValueChanged

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        if (refreshWorker != null)   refreshWorker.cancel(true);
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed
    //原先使用MouseReleased事件，得到的值还是原来的值。
    //如果在设置报警输出状态失败时，需要将状态值重新恢复到原来值，结果即使恢复到原来值后，还是会继续执行点击事件，将该状态继续设置为新值
    //所以最后还是改用MouseClicked事件。
    private void jTableAlarmOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlarmOutMouseClicked
        // TODO add your handling code here:
        try{
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            int Row = jTableAlarmOut.getSelectedRow();
            int Row_Model= jTableAlarmOut.convertRowIndexToModel(Row);//将视图中的行索引转化为数据模型中的行索引
            if (Row < 0 ) return;
            if (jTableAlarmOut.getSelectedColumn() == 0){
                modifyAlarmOutParas(Row_Model, true);
            }else{
                //双击
                if (evt.getClickCount() == 2) {
                    modifyAlarmOutParas(Row_Model, false);
                }
            }
        }catch(Exception e){
            TxtLogger.append(this.sFileName, "jTableAlarmOutMouseClicked()","系统在设置设备报警布防/撤防过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jTableAlarmOutMouseClicked
    
    /**
        * 函数:      modifyAlarmOutParas
        * 函数描述:  修改报警输出的状态
        * @param Row_Model      在JTableModel中的行号
        * @param DirectModify   是否直接点击CheckBox进行修改。false是双击其他栏进行修改
    */
    private void modifyAlarmOutParas(int Row_Model, boolean DirectModify){
        //clicked事件中，单击首列（CheckBox），其返回值则是鼠标点击后的值；双击其他列，则CheckBox显示的还是原来的值，没有改变。
        boolean CurrentIfAlarmOut = (boolean)AlarmOutTableModel.getValueAt(Row_Model,0);
        //JOptionPane.showMessageDialog(rootPane, NewIfAlarmOut?"Released true":"Released false");
        String NodeName = (String)AlarmOutTableModel.getValueAt(Row_Model, 1);
        String SerialNo = (String)AlarmOutTableModel.getValueAt(Row_Model, 3);

        boolean NewIfAlarmOut = !CurrentIfAlarmOut;//双击事件，则新的值应该和原来的值相反
        if (DirectModify) NewIfAlarmOut = CurrentIfAlarmOut;//点击CheckBox，则新的值就是现在的值。
        
        boolean bReturn = saveAlarmOutParas(SerialNo, NodeName, NewIfAlarmOut);
        if (bReturn) {
            AlarmOutTableModel.setValueAt(NewIfAlarmOut, Row_Model, 0);
        }else{
            AlarmOutTableModel.setValueAt(!NewIfAlarmOut, Row_Model, 0);
        }
        AlarmOutTableModel.fireTableDataChanged();
    }
    
    /**
        *函数:      initialDeviceTreeModel
        *函数描述:  初始化设备树
        * @return DefaultTreeModel
    */
    private DefaultTreeModel initialDeviceTreeModel()
    {
        m_RootDevice = new DefaultMutableTreeNode(sDevice);//"设备"
        DefaultTreeModel myDefaultTreeModel = new DefaultTreeModel(m_RootDevice);//使用根节点创建模型
        return myDefaultTreeModel;
    }
 
    /**
	 * 函数:      initialAlarmOutTableModel
         * 函数描述:  初始化设备报警输出列表jTableAlarmOut
         * @return JTableButtonModel
    */
    private JTableCheckBoxModel initialAlarmOutTableModel()
    {
        JTableCheckBoxModel  TableModel =new JTableCheckBoxModel(sTableTitle);
        return TableModel;
    }
    /**
        *函数:      fillIntoTableAlarmOut
        *函数描述:  将报警输出的相关数据输出到表格中
    */
    private void fillIntoTableAlarmOut(String AnotherName){
        try {

            Vector v = AlarmOutTableModel.getDataVector();
            if (v != null) v.clear();
            for (int i=0;i<listAlarmOutPara.size();i++){
                ArrayList NewList = (ArrayList)listAlarmOutPara.get(i);//
                //获取DeviceResourceBean（设备资源表中的“设备序列号”、“节点名”、“设备资源分类”、“接入设备的序列号”）-0
                //对应的“设备别名-1”、“IP地址-2”等参数，及对应的的接入设备的“设备别名-3 、设备资源分类名称-4（代码表中代码名称），加上报警输出状态-5
                DeviceResourceBean deviceResourceBean = (DeviceResourceBean)NewList.get(0);
//                DeviceResourceBean AlarmOutBean = ListAlarmOutPara.get(i);
                //“设备序列号”,“节点名”,“设备资源分类”
                //"设置","报警输出","设备名","序列号"
                String AnotherName2 = (String)NewList.get(1);
                String AnotherNameJoin = (String)NewList.get(3);
                //AnotherName==""说明点击在根节点上；AnotherName != ""时只显示该设备的报警输出
                if (AnotherName.equals("") || AnotherName2.equals(AnotherName)){
                        Vector newRow = new Vector();

                        newRow.add((Boolean)NewList.get(5)); //设置
                        if (AnotherNameJoin.equals(""))
                            newRow.add(AnotherName2 + "_" + deviceResourceBean.getNodename());//(String)deviceGroupPara.get(0));
                        else
                            newRow.add(AnotherName2 + "_" + AnotherNameJoin + "_" + deviceResourceBean.getNodename());
                        //newRow.add(deviceResourceBean.getNodename());
                        newRow.add(AnotherName2);
                        newRow.add(deviceResourceBean.getSerialno());

                        AlarmOutTableModel.addRow(newRow);//和下面的语句效果实际证明是同样的。
//                deviceManagedTableModel.getDataVector().add(newRow);
                }
    

            }
            AlarmOutTableModel.fireTableDataChanged();

            jTableAlarmOut.repaint();

        }catch(Exception e){
            TxtLogger.append(this.sFileName, "fillIntoTableAlarmOut()","系统在刷新报警输出列表过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
    }
    
    /**
        *函数:      refreshTableAlarmOut
        *函数描述:  从数据库中提取所有的管理设备到JTable中
    */
    private void refreshTableAlarmOut(String AnotherName){
        try {
            //如果设备名和通道号和上次点击一样，则不做任何操作。
                if (AnotherName.equals(sAnotherName))  return;
                sAnotherName = AnotherName;
                fillIntoTableAlarmOut( AnotherName);

        }catch(Exception e)
        {
            TxtLogger.append(this.sFileName, "refreshTableAlarmOut()","系统在刷新报警输出列表过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }

    }
    
    /**
        *函数:      saveAlarmOutParas
        *函数描述:  设置设备报警输出
        * @param SerialNo   设备序列号
        * @param NodeName   节点名
        * @return boolean false－停止输出，true－输出 
    */
    private boolean saveAlarmOutParas(String SerialNo,String NodeName,boolean NewIfAlarmOut){
        
        try{
            int Row = jTableAlarmOut.getSelectedRow();
            String OperName = NewIfAlarmOut?sOpenAlarmOut:sCloseAlarmOut;//"开启报警输出":"关闭报警输出";
            String OperNameFail = NewIfAlarmOut?sOpenAlarmOut_Fail:sCloseAlarmOut_Fail;//"开启报警输出失败":"关闭报警输出失败";
            String OperNameSucc = NewIfAlarmOut?sOpenAlarmOut_Succ:sCloseAlarmOut_Succ;//"开启报警输出成功":"关闭报警输出成功";
            String AnotherName = (String)AlarmOutTableModel.getValueAt(Row, 2);
            
            String[] ReturnA = CommonParas.getArraysFromTreeNode(NodeName);//数组：设备名、接入设备名、设备资源节点名
            String SerialNoJoin = "";
            if(!ReturnA[1].equals("")) SerialNoJoin = CommonParas.getSerialNO(ReturnA[1], sFileName);//接入设备序列号
            
            NativeLong AlarmOutPort = new NativeLong(CommonParas.getChannel(NodeName) - 1);//报警输出口。初始输出口从0开始
            NativeLong UserID = CommonParas.getUserID(CommonParas.getIndexOfDeviceList(null, null, SerialNo, sFileName), sFileName);
            if (UserID.intValue() == -1) return false;
            
            NativeLong AlarmOutStatic = new NativeLong(NewIfAlarmOut?1:0);
  
            
            boolean bSet = CommonParas.hCNetSDK.NET_DVR_SetAlarmOut(UserID,AlarmOutPort,AlarmOutStatic);
            if (!bSet) {
                //操作时间、设备别名、描述信息、设备序列号、分组名、节点名、接入设备序列号、接入通道、设备类型、被操作对象类型、调用的文件名
                CommonParas.SystemWriteErrorLog("", AnotherName,  OperNameFail,  SerialNo, "", ReturnA[2], SerialNoJoin,"",CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE ,
                         CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMOUT_CODE,sFileName);//OperName + "失败"
                CommonParas.showErrorMessage( OperNameFail, AnotherName, sFileName);//OperName + "失败"
            }else {
                //操作时间、日志类型、描述信息、设备序列号、分组名、节点名、接入设备序列号、接入通道、设备类型、被操作对象类型、调用的文件名
                CommonParas.SystemWriteLog("", CommonParas.LogType.LOG_OPER_CODE, OperName, SerialNo, "", ReturnA[2], SerialNoJoin,"",CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE ,
                         CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMOUT_CODE,sFileName);
                CommonParas.showMessage( OperNameSucc, sFileName);//OperName + "成功"
            }
            return bSet;
        }catch(Exception e)
        {
            TxtLogger.append(this.sFileName, "saveAlarmOutParas()","系统在设置设备报警输出过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
        return false;
    }
    /**
        *函数:      setAlarmOutPortStatus
        *函数描述:  设置报警输出口对应的报警输出状态
        * @param SerialNo   设备序列号
        * @param NodeName   节点名
        * @return boolean false－停止输出，true－输出 
    */
    private boolean setAlarmOutPortStatus(String SerialNo,String NodeName,boolean NewIfAlarmOut){
        try{
            //listAlarmOutPara：获取DeviceResourceBean（设备资源表中的“设备序列号”、“节点名”、“设备资源分类”、“接入设备的序列号”）-0
            //对应的“设备别名-1”、“IP地址-2”等参数，及对应的的接入设备的“设备别名-3，设备资源分类名称-4（代码表中代码名称），加上报警输出状态-5
            for (int i = 0;i < listAlarmOutPara.size();i++){
                    ArrayList NewList = (ArrayList)listAlarmOutPara.get(i);
                    String SerialNo2 = ((DeviceResourceBean)NewList.get(0)).getSerialno();
                    String AnotherNameJoin2 = (String)NewList.get(3);
                    String AnotherName2 = (String)NewList.get(1);
                    String NodeName2 ="";
                    if (AnotherNameJoin2.equals(""))
                        NodeName2 = AnotherName2 + "_" + ((DeviceResourceBean)NewList.get(0)).getNodename();
                    else NodeName2 = AnotherName2 + "_" + AnotherNameJoin2+"_"+((DeviceResourceBean)NewList.get(0)).getNodename();
                    if(SerialNo2.equals(SerialNo) && NodeName2.equals(NodeName)){
                        boolean OldIfAlarmOut = (boolean)NewList.get(5);
                        if (OldIfAlarmOut != NewIfAlarmOut) {
                            boolean bReturn = saveAlarmOutParas(SerialNo,NodeName, NewIfAlarmOut);
                            if (bReturn) NewList.set(5, NewIfAlarmOut);
                            return bReturn;
                        }
                    }
            }
        
        }catch(Exception e)
        {
            TxtLogger.append(this.sFileName, "getAlarmOutPortStatus()","系统在从listAlarmOutPara中获得设备的报警输出口对应的报警输出状态过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
        return false;
    }
    /**
        *函数:      initialListAlarmOutParas
        *函数描述:  获得所有设备的报警输出参数
    */
    private void initialListAlarmOutParas(){
        
        try{
            //获取DeviceResourceBean（设备资源表中的“设备序列号”、“节点名”、“设备资源分类”、“接入设备的序列号”）-0
            //对应的“设备别名-1”、“IP地址-2”等参数，及对应的的接入设备的“设备别名-3，设备资源分类名称-4（代码表中代码名称）
            listAlarmOutPara = DeviceResourceBean.getAllDeviceResourceParaList(CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_ALARMOUT_CODE , sFileName);
            for (int i = 0;i < listAlarmOutPara.size();i++){
                ((ArrayList)listAlarmOutPara.get(i)).add(false);//-5
            }
            getAllAlarmOutStatus();//获得所有设备的报警输出状态
            
            for (int i = 0;i < listAlarmOutPara.size();i++){
                ArrayList NewList = (ArrayList)listAlarmOutPara.get(i);
                String SerialNo = ((DeviceResourceBean)NewList.get(0)).getSerialno();
                String NodeName = ((DeviceResourceBean)NewList.get(0)).getNodename();
                int AlarmOutPort = CommonParas.getChannel(NodeName);
                NewList.set(5, getAlarmOutPortStatus( SerialNo, AlarmOutPort));
            }
        }catch(Exception e){
            TxtLogger.append(this.sFileName, "initialListAlarmOutParas()","系统在获得所有设备的报警输出参数过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
    }
    /**
        *函数:      getAlarmOutPortStatus
        *函数描述:  从listStrAlarmOutStatus中获得设备的报警输出口对应的报警输出状态
        * @param SerialNo   设备序列号
        * @param AlarmOutPort   报警输出口
        * @return boolean false－停止输出，true－输出 
    */
    private boolean getAlarmOutPortStatus(String SerialNo,int AlarmOutPort){
        try{
            for (int i = 0;i < listStrAlarmOutStatus.size();i++){
                ArrayList newList = (ArrayList)listStrAlarmOutStatus.get(i);
                String SerialNo2 = (String)newList.get(0);
                if (SerialNo2.equals(SerialNo)){
                    HCNetSDK.NET_DVR_ALARMOUTSTATUS_V30 strAlarmOutStatus30 = (HCNetSDK.NET_DVR_ALARMOUTSTATUS_V30)newList.get(1);
                    if (strAlarmOutStatus30 != null){
                        return strAlarmOutStatus30.Output[AlarmOutPort - 1] == 1;//报警输出口。初始输出口从0开始
                    }
                }
            }
        }catch(Exception e){
            TxtLogger.append(this.sFileName, "getAlarmOutPortStatus()","系统在获得设备的报警输出口对应的报警输出状态过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
        return false;
    }
    /**
        *函数:      getAllAlarmOutStatus
        *函数描述:  获得所有设备的报警输出状态
    */
    private void getAllAlarmOutStatus(){
        try{
            for (int i = 0;i < CommonParas.g_listDeviceDetailPara.size();i++){
                if (!bDeviceRefreshing) return;
                NativeLong UserID = CommonParas.getUserID(i, sFileName);
                String SerialNo = CommonParas.getDeviceParaBean(i, sFileName).getSerialNO();
                
                HCNetSDK.NET_DVR_ALARMOUTSTATUS_V30 strAlarmOutStatus30 = new HCNetSDK.NET_DVR_ALARMOUTSTATUS_V30();
                boolean bGet = CommonParas.hCNetSDK.NET_DVR_GetAlarmOut_V30(UserID,  strAlarmOutStatus30);
                
                ArrayList newList = new ArrayList();
                newList.add(SerialNo);
                newList.add(strAlarmOutStatus30);
                listStrAlarmOutStatus.add(newList);
            }
        }catch(Exception e){
            TxtLogger.append(this.sFileName, "getAllAlarmOutStatus()","系统在获得所有设备的报警输出状态过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
    }
    /**
	 * 函数:      setTableColWidth
         * 函数描述:  设置表格特殊列的宽度
    */
    private void setTableColWidth(){
        
        TableColumnModel tcmAlarmOut = jTableAlarmOut.getColumnModel();
        tcmAlarmOut.getColumn(0).setMinWidth(60);
        tcmAlarmOut.getColumn(0).setMaxWidth(60);
        tcmAlarmOut.getColumn(0).setPreferredWidth(60);
        
        tcmAlarmOut.getColumn(1).setMinWidth(240);
        //tcmAlarmOut.getColumn(1).setMaxWidth(480);
        tcmAlarmOut.getColumn(1).setWidth(240);
        
        tcmAlarmOut.getColumn(2).setMinWidth(120);
        //tcmAlarmOut.getColumn(2).setMaxWidth(120);
        tcmAlarmOut.getColumn(2).setWidth(120);
        tcmAlarmOut.getColumn(3).setMinWidth(0);
        tcmAlarmOut.getColumn(3).setMaxWidth(0);
        tcmAlarmOut.getColumn(3).setWidth(0);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogAlarmOutCtrl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogAlarmOutCtrl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogAlarmOutCtrl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogAlarmOutCtrl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogAlarmOutCtrl dialog = new JDialogAlarmOutCtrl(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    /**
        * 函数:      modifyLocales
        * 函数描述:  根据系统语言设置窗口的控件信息和消息文本
    */
    private void modifyLocales(){
        
        if (CommonParas.SysParas.ifChinese) return;//如果是中文，则不做任何操作
        
        MyLocales Locales = CommonParas.SysParas.sysLocales;
        
        //信息显示
        sTitle =            Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sTitle");  //报警输出控制
        sTableTitle[0] =    Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sTableTitle0");  //设置
        sTableTitle[1] =    Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sTableTitle1");  //报警输出
        sTableTitle[2] =    Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sTableTitle2");  //设备名
        sTableTitle[3] =    Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sTableTitle3");  //序列号
        sOpenAlarmOut =     Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sOpenAlarmOut");  //开启报警输出
        sCloseAlarmOut =    Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sCloseAlarmOut");  //关闭报警输出
        sOpenAlarmOut_Fail =Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sOpenAlarmOut_Fail");  //开启报警输出失败
        sCloseAlarmOut_Fail=Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sCloseAlarmOut_Fail");  //关闭报警输出失败
        sOpenAlarmOut_Succ =Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sOpenAlarmOut_Succ");  //开启报警输出成功
        sCloseAlarmOut_Succ=Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sCloseAlarmOut_Succ");  //关闭报警输出成功
        sDevice =           Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sDevice");  //"设备";
        sRefreshAlarmOutInfo= Locales.getString("ClassStrings", "JDialogAlarmOutCtrl.sRefreshAlarmOutInfo");  //"刷新设备报警输出状态信息";

        //标签和按钮显示
        this.setTitle(sTitle);//报警输出控制
        jLabelTitle.setText(sTitle);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelContainer;
    private javax.swing.JPanel jPanelFirst;
    private javax.swing.JScrollPane jScrollPaneAlarmOut;
    private javax.swing.JScrollPane jScrollPaneDevice;
    private javax.swing.JSplitPane jSplitPaneAlarmOut;
    private javax.swing.JTable jTableAlarmOut;
    private javax.swing.JTree jTreeDevice;
    // End of variables declaration//GEN-END:variables

    private String sTitle="报警输出控制";
    private String[] sTableTitle = new String[] {"设置","报警输出","设备名","序列号"};
    private String sOpenAlarmOut = "开启报警输出";
    private String sCloseAlarmOut= "关闭报警输出";

    private String sOpenAlarmOut_Fail = "开启报警输出失败";
    private String sCloseAlarmOut_Fail= "关闭报警输出失败";
    private String sOpenAlarmOut_Succ = "开启报警输出成功";
    private String sCloseAlarmOut_Succ= "关闭报警输出成功";
    
    private String sDevice = "设备";
    
    private String sRefreshAlarmOutInfo= "刷新设备报警输出状态信息";
    /**
        *类:      RefreshAlarmOutParasWorker
        *类描述:  刷新设备报警输出状态并行线程类
    */
    private class RefreshAlarmOutParasWorker extends SwingWorker {

        RefreshAlarmOutParasWorker(){
            bDeviceRefreshing = true;//是否正在刷新设备状态
            CommonParas.showProgressWindow(this);
        }
        @Override
        protected Object doInBackground() throws Exception {
            CommonParas.setPorgressInfo(sRefreshAlarmOutInfo);//"刷新设备报警输出状态信息"
            initialListAlarmOutParas();
            fillIntoTableAlarmOut("");//添加全部报警输出
            return null;
        }
        
        @Override
        protected void done(){
            bDeviceRefreshing = false;//是否正在刷新设备状态
            CommonParas.closeProgressWindow();
        }
    }
}

