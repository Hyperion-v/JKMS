/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;

import com.sun.jna.NativeLong;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.tree.DefaultTreeModel;
import jyms.data.TxtLogger;
import jyms.tools.CheckBoxNodeTree.CheckBoxTreeCellRenderer;
import jyms.tools.CheckBoxNodeTree.CheckBoxTreeNode;
import jyms.tools.CheckBoxNodeTree.CheckBoxTreeNodeSelectionListener;
import jyms.tools.DomXML;
import jyms.tools.TreeUtil;
import jyms.ui.PanelUI_LineBorder;
import jyms.ui.PanelUI_MatteBorder;
import jyms.ui.ScrollBarUI_White;
import jyms.ui.ScrollPaneUI_White;
import jyms.ui.SplitPaneUI_White;

/**
 *
 * @author John
 */
public class JDialogCtrlWiper extends javax.swing.JDialog {

    private final String sFileName = this.getClass().getName() + ".java";
    private CheckBoxTreeNode m_DeviceRoot;//通道树根节点

    String sAnotherName = "";
    private NativeLong m_lUserID;//用户ID

    private boolean m_bWiperOn = false;//开启雨刷
    //listChannelWipeOn所有通道的雨刷是否开启列表。存放所有开启雨刷的通道，窗口关闭，必须关闭所有雨刷。
    //设备名-0；登录ID-1；通道List-2（CheckBoxTreeNode节点-0；是否已打开-1）；序列号-3
    private ArrayList listChannelWipeOn = new ArrayList();
    /**
     * Creates new form JDialogCheckTime
     * @param parent
     * @param modal
     */
    public JDialogCtrlWiper(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        modifyLocales();
        initialParas();
        
    }
    /**
        * 函数:      initialParas
        * 函数描述:  初始化窗口参数
    */
    private void initialParas(){
        jTreeDev.setModel(this.initialDevTreeModel());
        jTreeDev.setCellRenderer(new CheckBoxTreeCellRenderer()); 
        jTreeDev.addMouseListener(new CheckBoxTreeNodeSelectionListener()); 
        CommonParas.CreateDeviceResourceTree(jTreeDev, m_DeviceRoot, "CheckBoxTreeNode", CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE, sFileName);//监控点

        initialListChannelWipeOn();//初始化支持雨刷功能、当前用户具有权限的所有设备的通道的雨刷是否开启列表
        jSplitPaneCtrl.setDividerLocation(260);
        
        //设置自定义UI
        jPanelContainer.setUI(new PanelUI_MatteBorder());
        jSplitPaneCtrl.setUI(new SplitPaneUI_White());
 
        jScrollPaneTree.setUI(new ScrollPaneUI_White());//jScrollPaneAlarmOut
        jScrollPaneTree.getVerticalScrollBar().setUI(new ScrollBarUI_White());
        jScrollPaneTree.getHorizontalScrollBar().setUI(new ScrollBarUI_White());
        
        jPanelRight.setUI(new PanelUI_LineBorder());
 
//            jPanelImportIn.setUI(new PanelUI_LineBorder());
//            jPanelImportOut.setUI(new PanelUI_LineBorder());
        CommonParas.setJButtonUnDecorated(jButtonExit);

    }
    /**
        * 函数:      ifHavePTZWiper
        * 函数描述:  获取设备是否具有雨刷的能力
    */
    private boolean ifHavePTZWiper(String AnotherName, NativeLong UserID){
        try{
            String pInBuf = "<PTZAbility><channelNO>1</channelNO></PTZAbility>";
            byte[] pOutBuf = new byte[64*1024];//128k应该够用了
            boolean bRet = CommonParas.hCNetSDK.NET_DVR_GetDeviceAbility( UserID, HCNetSDK.DEVICE_ABILITY_INFO, pInBuf, pInBuf.length(), pOutBuf, 64*1024);
            if (!bRet)
            {
                CommonParas.showErrorMessage( sGetDeviceCapabilitySetsFail, AnotherName, sFileName);// "获取设备能力集失败。"
                //写错误日志
                CommonParas.SystemWriteErrorLog( sGetDeviceCapabilitySetsFail,  AnotherName, sFileName);// "获取设备能力集失败"
                return false;
            }
            String XMLOut = new String(pOutBuf).trim();
            DomXML domXML = new DomXML(XMLOut,sFileName);
            
            String ReturnV = domXML.readSecondLevelAttributeValue("PTZControl", "controlType", "opt");//optional中文解释	"可选择的"
            if (!(ReturnV.equals(""))) {
                String ControlType = ReturnV.toLowerCase();//将异常的处理方式保存
                if (ControlType.lastIndexOf("wiper") > -1) return true;
            }
            //获得支持雨刷状态wiper
            //String ReturnV = domXML.readAttributeValue("WiperStatus", "opt");

        }catch (Exception e){
            TxtLogger.append(this.sFileName, "ifHavePTZWiper()","系统在获取设备是否具有雨刷的能力过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFirst = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jPanelContainer = new javax.swing.JPanel();
        jSplitPaneCtrl = new javax.swing.JSplitPane();
        jScrollPaneTree = new javax.swing.JScrollPane();
        jTreeDev = new javax.swing.JTree();
        jPanelRight = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButtonStartWiper = new javax.swing.JButton();
        jButtonStopWiper = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("批量控制雨刷");
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelTitle.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("批量控制雨刷");

        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/close.png"))); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFirstLayout = new javax.swing.GroupLayout(jPanelFirst);
        jPanelFirst.setLayout(jPanelFirstLayout);
        jPanelFirstLayout.setHorizontalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFirstLayout.createSequentialGroup()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelFirstLayout.setVerticalGroup(
            jPanelFirstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFirstLayout.createSequentialGroup()
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelFirst, java.awt.BorderLayout.PAGE_START);

        jScrollPaneTree.setPreferredSize(new java.awt.Dimension(140, 322));

        jTreeDev.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jTreeDev.setMaximumSize(new java.awt.Dimension(120, 64));
        jTreeDev.setName("jTreeDev"); // NOI18N
        jScrollPaneTree.setViewportView(jTreeDev);

        jSplitPaneCtrl.setLeftComponent(jScrollPaneTree);

        jPanelRight.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jButtonStartWiper.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jButtonStartWiper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/wiperopen.png"))); // NOI18N
        jButtonStartWiper.setText("开启雨刷");
        jButtonStartWiper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartWiperActionPerformed(evt);
            }
        });

        jButtonStopWiper.setFont(new java.awt.Font("微软雅黑", 0, 15)); // NOI18N
        jButtonStopWiper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/wiperclose.png"))); // NOI18N
        jButtonStopWiper.setText("关闭雨刷");
        jButtonStopWiper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopWiperActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jButtonStartWiper, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButtonStopWiper, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(344, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStartWiper)
                    .addComponent(jButtonStopWiper))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanelRight.add(jPanel2, java.awt.BorderLayout.CENTER);

        jSplitPaneCtrl.setRightComponent(jPanelRight);

        javax.swing.GroupLayout jPanelContainerLayout = new javax.swing.GroupLayout(jPanelContainer);
        jPanelContainer.setLayout(jPanelContainerLayout);
        jPanelContainerLayout.setHorizontalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 836, Short.MAX_VALUE)
            .addGroup(jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPaneCtrl, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE))
        );
        jPanelContainerLayout.setVerticalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
            .addGroup(jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPaneCtrl))
        );

        getContentPane().add(jPanelContainer, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartWiperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartWiperActionPerformed
        // TODO add your handling code here:
        ctrlWiper(0);//0开始
    }//GEN-LAST:event_jButtonStartWiperActionPerformed

    private void jButtonStopWiperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopWiperActionPerformed
        // TODO add your handling code here:
        ctrlWiper(1);//1停止
    }//GEN-LAST:event_jButtonStopWiperActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        ctrlWiper(1);//1停止
    }//GEN-LAST:event_formWindowClosing

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        ctrlWiper(1);//1停止
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed
    /**
        * 函数:      ctrlWiper
        * 函数描述:  批量开启/关闭雨刷
    */
    private void ctrlWiper(int dwPTZCommand){
        try{
            //getAllSeletctedDVRChannel();
            String WiperOpenOrClose = dwPTZCommand==0?sWiperOpen:sWiperClose;// "开启" "关闭"
            if (listChannelWipeOn.size() < 1) return;
            for (int i=0;i<listChannelWipeOn.size();i++){
                ArrayList NewListDVR = (ArrayList)listChannelWipeOn.get(i);//得到一条设备的记录
                String AnotherName = (String)NewListDVR.get(0);
                String SerialNo = (String)NewListDVR.get(3);
                NativeLong UserID = (NativeLong)NewListDVR.get(1);
                //得到该设备的通道记录
                ArrayList NewListDVRChannel = (ArrayList)NewListDVR.get(2);
                for (int j=0;j<NewListDVRChannel.size();j++){
                    //得到单条通道信息
                    ArrayList NewListNode = (ArrayList)NewListDVRChannel.get(j);
                    CheckBoxTreeNode Node1 = (CheckBoxTreeNode)NewListNode.get(0);
                    String NodeName = Node1.toString();//NewListNode.get(0);
                    if (Node1.isSelected()){
                        int  Channel = CommonParas.getChannel(NodeName);
                        //NativeLong Channel = new NativeLong(Channel);
                        boolean bCtrl = CommonParas.hCNetSDK.NET_DVR_PTZControl_Other(UserID, new NativeLong(Channel), HCNetSDK.WIPER_PWRON, dwPTZCommand);
                        if (!bCtrl) {
                            //JOptionPane.showMessageDialog(this, "打开"+AnotherName+"_"+NodeName + "雨刷失败。错误代码：" + CommonParas.hCNetSDK.NET_DVR_GetLastError());
                            CommonParas.SystemWriteErrorLog(MessageFormat.format(sCtrlWiperFail , WiperOpenOrClose, NodeName), AnotherName, sFileName);//WiperOpenOrClose + AnotherName + "_" + NodeName + "雨刷失败"
                            CommonParas.showErrorMessage(MessageFormat.format(sCtrlWiperFail , WiperOpenOrClose, NodeName), AnotherName, sFileName);//WiperOpenOrClose + AnotherName + "_" + NodeName + "雨刷失败"
                        }else {
                            //操作时间、日志类型、描述信息、设备序列号、分组名、节点名、接入设备序列号、接入通道、设备类型、被操作对象类型、调用的文件名
                            CommonParas.SystemWriteLog("", CommonParas.LogType.LOG_OPER_CODE, MessageFormat.format(sCtrlWiper , WiperOpenOrClose), SerialNo, "", NodeName, "","",CommonParas.DVRType.DVRTYPE_ENCODINGDVR_CODE ,CommonParas.DVRResourceType.RESTYPE_ENCODINGDVR_CHANNEL_CODE,sFileName);//WiperOpenOrClose+"雨刷"
                            CommonParas.showMessage(MessageFormat.format(sCtrlWiperSucc , WiperOpenOrClose, NodeName),  sFileName);//WiperOpenOrClose + AnotherName + "_" + NodeName + "雨刷成功"
                            NewListNode.set(1, dwPTZCommand==0?true:false);//0打开1停止
                        }
                    }
                }
            }
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "ctrlWiper()","系统在批量开启/关闭雨刷过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }
    
//    private void getAllSeletctedDVRChannel(){
//        try{
//                if (listChannelWipeOn.size() > 0) return;
//                for (int i=0;i<m_DeviceRoot.getChildCount();i++){
//
//                    ArrayList NewListDVRChannel = new ArrayList();
//                    for (int j=0;j<m_DeviceRoot.getChildAt(i).getChildCount();j++)
//                    {
//                        CheckBoxTreeNode Node1 = (CheckBoxTreeNode)m_DeviceRoot.getChildAt(i).getChildAt(j);
//                        
//                        if (Node1.isSelected()){
//                            ArrayList NewListNode = new ArrayList();
//                            NewListNode.add(Node1.toString());
//                            NewListNode.add(false);
//                            NewListDVRChannel.add(NewListNode);
//                        }
//                    }
//                    if (NewListDVRChannel.size() > 0) {
//                        ArrayList NewListDVR = new ArrayList();
//                        NewListDVR.add(m_DeviceRoot.getChildAt(i).toString());//0
//                        NativeLong UserId = CommonParas.getUserID(m_DeviceRoot.getChildAt(i).toString(), sFileName);
//                        NewListDVR.add(UserId);//1
//                        NewListDVR.add(NewListDVRChannel);//2
//                        listChannelWipeOn.add(NewListDVR);
//                    }
//                }
//        }catch (Exception e){
//            TxtLogger.append(this.sFileName, "getAllSeletctedChannel()","系统在读取所有选择通道过程中，出现错误"
//                             + "\r\n                       Exception:" + e.toString());
//        }
//    }
    /**
        * 函数:      initialListChannelWipeOn
        * 函数描述:  初始化支持雨刷功能、当前用户具有权限的所有设备的通道的雨刷是否开启列表
    */
    private void initialListChannelWipeOn(){
        try{
            //待删除的设备节点。对于当前用户无权限和不具备雨刷能力的设备，其对应树节点节点将从设备树中删除。
            ArrayList<CheckBoxTreeNode> ListTreeNodeDelete = new ArrayList<>();
            
            for (int i=0;i<m_DeviceRoot.getChildCount();i++){

                CheckBoxTreeNode Node2 = (CheckBoxTreeNode)m_DeviceRoot.getChildAt(i);
                String AnotherName = Node2.toString();
                int Index = CommonParas.getIndexOfDeviceList(AnotherName, sFileName);
                String SerialNo = CommonParas.getDeviceParaBean(Index, sFileName).getSerialNO();
                NativeLong UserID = CommonParas.getUserID(Index, sFileName);
                //判断当前是否拥有该设备雨刷的权限
                boolean ifHaveSubAuthority = CommonParas.ifHaveSubAuthorityAnotherName(CommonParas.AuthorityItems.AUTHORITY_WIPER_CTRL, AnotherName, sFileName);
                //判断该设备是否拥有雨刷能力
                boolean ifHaveWiper = ifHavePTZWiper(AnotherName, UserID);

                if (ifHaveSubAuthority && ifHaveWiper){//符合要求的设备加入雨刷控制ArrayList中
                    //设备名-0；登录ID-1；通道List-2（CheckBoxTreeNode节点-0；是否已打开-1）
                    ArrayList NewListDVR = new ArrayList();

                    ArrayList NewListDVRChannel = new ArrayList();
                    for (int j=0;j<m_DeviceRoot.getChildAt(i).getChildCount();j++)
                    {
                        CheckBoxTreeNode Node1 = (CheckBoxTreeNode)m_DeviceRoot.getChildAt(i).getChildAt(j);

                        ArrayList NewListNode = new ArrayList();
                        NewListNode.add(Node1);
                        NewListNode.add(false);//false代表未打开
                        NewListDVRChannel.add(NewListNode);
                    }

                    NewListDVR.add(AnotherName);//0
                    NewListDVR.add(UserID);//1
                    NewListDVR.add(NewListDVRChannel);//2
                    NewListDVR.add(SerialNo);//3
                    listChannelWipeOn.add(NewListDVR);
                }else{//不符合要求的设备节点，需要删除
                    ListTreeNodeDelete.add(Node2);
                }
            }

            for (int i=0;i<ListTreeNodeDelete.size();i++){
                ListTreeNodeDelete.get(i).removeFromParent();
            }
            DefaultTreeModel TreeModel = ((DefaultTreeModel) jTreeDev.getModel());//获取树模型
            TreeModel.reload();//将添加的节点显示到界面
        }catch (Exception e){
            TxtLogger.append(this.sFileName, "initialListChannelWipeOn()","系统在初始化支持雨刷功能、当前用户具有权限的所有设备的通道的雨刷是否开启列表过程中，出现错误"
                             + "\r\n                       Exception:" + e.toString());
        }
    }
    /**
        *函数:      initialResourceTreeModel4
        *函数描述:  初始化设备资源树
        * @return DefaultTreeModel
     */
    private DefaultTreeModel initialDevTreeModel()
    {
        m_DeviceRoot = new CheckBoxTreeNode(sAllDevice);//"全部设备"
        DefaultTreeModel myDefaultTreeModel = new DefaultTreeModel(m_DeviceRoot);//使用根节点创建模型
        return myDefaultTreeModel;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogCtrlWiper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogCtrlWiper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogCtrlWiper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogCtrlWiper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogCtrlWiper dialog = new JDialogCtrlWiper(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    /**
        * 函数:      modifyLocales
        * 函数描述:  根据系统语言设置窗口的控件信息和消息文本
    */
    private void modifyLocales(){
        
        if (CommonParas.SysParas.ifChinese) return;//如果是中文，则不做任何操作

        
        MyLocales Locales = CommonParas.SysParas.sysLocales;
        
        //信息显示
        sTitle = Locales.getString("ClassStrings", "JDialogCtrlWiper.sTitle");  //批量控制雨刷
        sWiperOpen = Locales.getString("ClassStrings", "JDialogCtrlWiper.sWiperOpen");  //开启
        sWiperClose = Locales.getString("ClassStrings", "JDialogCtrlWiper.sWiperClose");  //关闭
        sCtrlWiper = Locales.getString("ClassStrings", "JDialogCtrlWiper.sCtrlWiper");  //{0}雨刷
        sCtrlWiperSucc = Locales.getString("ClassStrings", "JDialogCtrlWiper.sCtrlWiperSucc");  //{0}{1}雨刷成功
        sCtrlWiperFail = Locales.getString("ClassStrings", "JDialogCtrlWiper.sCtrlWiperFail");  //{0}{1}雨刷失败
        sGetDeviceCapabilitySetsFail = Locales.getString("ClassStrings", "JDialogCtrlWiper.sGetDeviceCapabilitySetsFail");  //获取设备能力集失败
        sAllDevice = Locales.getString("ClassStrings", "JDialogCtrlWiper.sAllDevice");  //全部设备
        //标签和按钮显示
        jButtonStartWiper.setText( Locales.getString("ClassStrings", "JDialogCtrlWiper.jButtonStartWiper"));  //开启雨刷
        jButtonStopWiper.setText( Locales.getString("ClassStrings", "JDialogCtrlWiper.jButtonStopWiper"));  //关闭雨刷
        this.setTitle(sTitle);
        jLabelTitle.setText(sTitle);


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonStartWiper;
    private javax.swing.JButton jButtonStopWiper;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelContainer;
    private javax.swing.JPanel jPanelFirst;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JScrollPane jScrollPaneTree;
    private javax.swing.JSplitPane jSplitPaneCtrl;
    private javax.swing.JTree jTreeDev;
    // End of variables declaration//GEN-END:variables

    private String sTitle = "批量控制雨刷";
    private String sWiperOpen = "开启";
    private String sWiperClose = "关闭";
    private String sCtrlWiper = "{0}雨刷";
    private String sCtrlWiperSucc = "{0}{1}雨刷成功";
    private String sCtrlWiperFail = "{0}{1}雨刷失败";
    private String sGetDeviceCapabilitySetsFail = "获取设备能力集失败";
    private String sAllDevice = "全部设备";
}
