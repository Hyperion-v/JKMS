/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;

import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import jyms.data.DeviceParaBean;
import jyms.tools.TableUtil.JTableCustomizeModel;
import jyms.data.TxtLogger;
import jyms.ui.ScrollPaneUI_White;
import jyms.ui.TableHeaderUI_White;
import jyms.ui.TableUI_White;

/**
 *
 * @author John
 */
public class JDialogSelectDev2 extends javax.swing.JDialog {
    
    private final String sFileName = this.getClass().getName() + ".java";
    private JTableCheckBoxModel deviceManagedTableModel ;
    int iCurrentRow = -1;
    /**
     * Creates new form JDialogSelectDev
     * @param parent
     * @param modal
     */
    public JDialogSelectDev2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialFrameParas();
    }
    
    public JDialogSelectDev2(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialFrameParas();
    }
    
    /**
	 * 函数:      initialFrameParas
         * 函数描述:  初始化窗口参数
    */
    private void initialFrameParas(){
        deviceManagedTableModel = this.initialDeviceManagedTableModel();
        jTableDeviceManaged.setModel(deviceManagedTableModel);
        setTableColWidth();
        fillIntoTableDeviceManaged();
        //UI设置
        jScrollPaneDeviceManaged.setUI(new ScrollPaneUI_White());
        jTableDeviceManaged.setUI(new TableUI_White());
        jTableDeviceManaged.getTableHeader().setUI(new TableHeaderUI_White());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneDeviceManaged = new javax.swing.JScrollPane();
        jTableDeviceManaged = new javax.swing.JTable();
        jLabelSelectDev = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPasswordFieldDev = new javax.swing.JPasswordField();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("选择设备");

        jTableDeviceManaged.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDeviceManagedMouseReleased(evt);
            }
        });
        jScrollPaneDeviceManaged.setViewportView(jTableDeviceManaged);

        jLabelSelectDev.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelSelectDev.setText("设备列表：");

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabel1.setText("密码：");

        jButtonOK.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonOK.setText("确定");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonCancel.setText("取消");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jPasswordFieldDev))
                    .addComponent(jLabelSelectDev)
                    .addComponent(jScrollPaneDeviceManaged, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancel)
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSelectDev)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneDeviceManaged, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jPasswordFieldDev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableDeviceManagedMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDeviceManagedMouseReleased
        // TODO add your handling code here:
        int Row = jTableDeviceManaged.getSelectedRow();
        if (Row < 0 ) return;
        try{
            //如果有一个选择了，其他选中的必须设置为“未选中”状态
            if (jTableDeviceManaged.getSelectedColumn() == 0){

                boolean NewSelect = (Boolean)jTableDeviceManaged.getValueAt(Row,0);
                if (iCurrentRow != Row){
                    if (NewSelect && iCurrentRow > -1) {
                        deviceManagedTableModel.setValueAt(false, iCurrentRow, 0);
                        deviceManagedTableModel.fireTableDataChanged();
                    }
                    iCurrentRow = Row;
                }
            }
        }catch(Exception e)
            {
                TxtLogger.append(this.sFileName, "jTableDeviceManagedMouseReleased()","系选择设备过程中，出现错误" + 
                                "\r\n                       Exception:" + e.toString());   
            }
    }//GEN-LAST:event_jTableDeviceManagedMouseReleased

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        // TODO add your handling code here:
        int Count = jTableDeviceManaged.getRowCount();
        boolean IfSelect = false;
        for (int i=0;i<Count;i++){
            boolean NewSelect = (Boolean)jTableDeviceManaged.getValueAt(i,0);
            if (NewSelect){
                iCurrentRow = i;
                IfSelect = true;
                break;
            }
        }
        
        if (!IfSelect) iCurrentRow = -1;
        else{
            String sPassword = new String(jPasswordFieldDev.getPassword());
            String sPassword2 = (String)jTableDeviceManaged.getValueAt(iCurrentRow,5);
            if (!(sPassword.equals(sPassword2))) {
                JOptionPane.showMessageDialog(rootPane, "密码错误！");
                jPasswordFieldDev.requestFocusInWindow();
                return;
            }
        }
        this.dispose();
    }//GEN-LAST:event_jButtonOKActionPerformed
    
    
    /**
        *函数:      fillIntoTableDeviceManaged
        *函数描述:  从数据库中提取所有的管理设备到JTable中
    */
    private void fillIntoTableDeviceManaged(){
        try {

            Vector v = deviceManagedTableModel.getDataVector();

            for (int i=0;i<CommonParas.g_listDeviceDetailPara.size();i++){
                ArrayList ListDeviceparaBean = (ArrayList)CommonParas.g_listDeviceDetailPara.get(i);
                //listDeviceDetailPara获取设备参数表中的 DeviceParaBean-0,设备类型-1（代码表中的代码名称）等参数；
                //现在加上登录ID-2，再加上NET_DVR_Login_V30()设备参数结构体NET_DVR_DEVICEINFO_V30-3;报警布防句柄AlarmHandle-4;
                //IP设备资源及IP通道资源配置结构体NET_DVR_IPPARACFG-5
                DeviceParaBean deviceParaBean = (DeviceParaBean)ListDeviceparaBean.get(0);
                Vector newRow = new Vector();
                
                newRow.add(new Boolean(false));
                newRow.add(deviceParaBean.getAnothername());//别名
                newRow.add(deviceParaBean.getDVRIP());//IP地址
                newRow.add(deviceParaBean.getServerport());//端口号2
                newRow.add(deviceParaBean.getUsername());//用户名3
                newRow.add(deviceParaBean.getPassword());//密码4
                
                deviceManagedTableModel.addRow(newRow);//和下面的语句效果实际证明是同样的。
//                deviceManagedTableModel.getDataVector().add(newRow);
            }
            deviceManagedTableModel.fireTableDataChanged();

            jTableDeviceManaged.repaint();

        }catch(Exception e)
            {
                TxtLogger.append(this.sFileName, "fillIntoTableDeviceManaged()","系统在刷新管理设备表过程中，出现错误" + 
                                "\r\n                       Exception:" + e.toString());   
            }

    }
    /**
	 * 函数:      initialDeviceManagedTableModel
         * 函数描述:  初始化管理设备列表jTableDeviceManaged
         * @return JTableCheckBoxModel
    */
    private JTableCheckBoxModel initialDeviceManagedTableModel()
    {
        String tabeTile[];
        tabeTile = new String[] {"选中","设备","IP地址","端口号","用户名","密码"};
        JTableCheckBoxModel  DeviceManagedTableModel =new JTableCheckBoxModel(tabeTile);
        return DeviceManagedTableModel;
    }
    /**
	 * 函数:      setTableColWidth
         * 函数描述:  设置表格特殊列的宽度
    */
    private void setTableColWidth(){
        
        TableColumnModel tcmDeviceManaged = jTableDeviceManaged.getColumnModel();
        tcmDeviceManaged.getColumn(0).setMinWidth(0);
        tcmDeviceManaged.getColumn(0).setMaxWidth(60);
        tcmDeviceManaged.getColumn(0).setPreferredWidth(60);
        
        tcmDeviceManaged.getColumn(2).setMinWidth(0);
        tcmDeviceManaged.getColumn(2).setMaxWidth(0);
        tcmDeviceManaged.getColumn(2).setWidth(0);
        tcmDeviceManaged.getColumn(3).setMinWidth(0);
        tcmDeviceManaged.getColumn(3).setMaxWidth(0);
        tcmDeviceManaged.getColumn(3).setWidth(0);
        tcmDeviceManaged.getColumn(4).setMinWidth(0);
        tcmDeviceManaged.getColumn(4).setMaxWidth(0);
        tcmDeviceManaged.getColumn(4).setWidth(0);
        tcmDeviceManaged.getColumn(5).setMinWidth(0);
        tcmDeviceManaged.getColumn(5).setMaxWidth(0);
        tcmDeviceManaged.getColumn(5).setWidth(0);

    }
    public int getIndexListDevicePara(){
        return iCurrentRow;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogSelectDev2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogSelectDev2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogSelectDev2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogSelectDev2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogSelectDev2 dialog = new JDialogSelectDev2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelSelectDev;
    private javax.swing.JPasswordField jPasswordFieldDev;
    private javax.swing.JScrollPane jScrollPaneDeviceManaged;
    private javax.swing.JTable jTableDeviceManaged;
    // End of variables declaration//GEN-END:variables

    private class JTableCheckBoxModel extends JTableCustomizeModel
    {

        public JTableCheckBoxModel(String[] columnNames) {
            super(columnNames);
        }
        
        @Override
        public boolean isCellEditable(int row, int column) {
            if (column == 0) return true;
            return false;
        }
    }
}
