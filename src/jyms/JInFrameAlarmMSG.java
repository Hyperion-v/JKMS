/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jyms;


import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import jyms.data.ClientLogBean;
import jyms.data.TxtLogger;

/**
 *
 * @author John
 */
public class JInFrameAlarmMSG extends javax.swing.JInternalFrame{
    private final String sFileName = this.getClass().getName() + ".java";
    private String oldRemarks = "";
    private final int colOfRemarks = 8;
    
    private String[] alarmMSGTableHeaderTitle = new String[]{"ID", "报警时间",  "报警类型", "报警设备", "通道/报警输入/硬盘号","接入设备","通道号","报警时间2","备注"};
    private String[] errorMSGTableHeaderTitle = new String[]{"时间", "描述"};
    /**
     * Creates new form JInFrameAlarm
     */
    public JInFrameAlarmMSG() {
        initComponents();
        modifyLocales();
        //初始化参数
        initialParas();
    }
    
    /**
	 * 函数:      initialParas
         * 函数描述:  初始化参数
    */
    private void initialParas(){
        //"ID", "报警时间",  "报警类型", "报警设备", "通道/报警输入/硬盘号","接入设备","通道号","报警时间2","备注8"
        CommonParas.alarmMSGTableModel = CommonParas.initialNormalOneEditTableModel(alarmMSGTableHeaderTitle);
        jTableAlarmMSG.setModel(CommonParas.alarmMSGTableModel);
        
        //jTableAlarmMSG.setRowHeight(30);
        
        CommonParas.alarmMSGTableModel.addTableModelListener(new TableModelListener(){

                @Override
                public void tableChanged(TableModelEvent e) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    int type = e.getType();
                    if (type != TableModelEvent.UPDATE) return;
                    if(column != colOfRemarks) return;
                    String NewRemarks = (String)CommonParas.alarmMSGTableModel.getValueAt(row, column);
                    if (!NewRemarks.equals(oldRemarks)){
                        //修改报警的注释
                        //jLabel1.setText("旧值：" + oldRemarks + "；新值：" + NewRemarks);
                        modifyRemarks(row,column,NewRemarks);
                    }
                }
        
        });
        
        CommonParas.errorMSGTableModel = CommonParas.initialNormalNoEditTableModel(errorMSGTableHeaderTitle);
        jTableErrorMSG.setModel(CommonParas.errorMSGTableModel);
        
        setTableColWidth();
        
        CommonParas.setJButtonUnDecorated(jButtonAlarmFilterSet);
        CommonParas.setJButtonUnDecorated(jButtonClear);
        CommonParas.setJButtonUnDecorated(jButtonStopVoice);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneAlarm = new javax.swing.JTabbedPane();
        jScrollPaneAlarm = new javax.swing.JScrollPane();
        jTableAlarmMSG = new javax.swing.JTable();
        jScrollPaneError = new javax.swing.JScrollPane();
        jTableErrorMSG = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxIfPopupAlarmMSG = new javax.swing.JCheckBox();
        jCheckBoxIfAlarmVoice = new javax.swing.JCheckBox();
        jButtonClear = new javax.swing.JButton();
        jButtonStopVoice = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxMotionDetect = new javax.swing.JCheckBox();
        jCheckBoxException = new javax.swing.JCheckBox();
        jCheckBoxTreversePlane = new javax.swing.JCheckBox();
        jCheckBoxOther = new javax.swing.JCheckBox();
        jCheckBoxFieldDetecion = new javax.swing.JCheckBox();
        jButtonAlarmFilterSet = new javax.swing.JButton();

        setBorder(null);
        setTitle("报警窗口");

        jTabbedPaneAlarm.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jTableAlarmMSG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableAlarmMSG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableAlarmMSGMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableAlarmMSGMouseReleased(evt);
            }
        });
        jScrollPaneAlarm.setViewportView(jTableAlarmMSG);

        jTabbedPaneAlarm.addTab(" 报警 ", new javax.swing.ImageIcon(getClass().getResource("/jyms/image/alarm16.png")), jScrollPaneAlarm); // NOI18N

        jTableErrorMSG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPaneError.setViewportView(jTableErrorMSG);

        jTabbedPaneAlarm.addTab(" 错误 ", new javax.swing.ImageIcon(getClass().getResource("/jyms/image/error.png")), jScrollPaneError); // NOI18N

        getContentPane().add(jTabbedPaneAlarm, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(64, 64, 64));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jCheckBoxIfPopupAlarmMSG.setBackground(new java.awt.Color(64, 64, 64));
        jCheckBoxIfPopupAlarmMSG.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxIfPopupAlarmMSG.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxIfPopupAlarmMSG.setText("弹出报警窗口");
        jCheckBoxIfPopupAlarmMSG.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxIfPopupAlarmMSGItemStateChanged(evt);
            }
        });

        jCheckBoxIfAlarmVoice.setBackground(new java.awt.Color(64, 64, 64));
        jCheckBoxIfAlarmVoice.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxIfAlarmVoice.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxIfAlarmVoice.setSelected(true);
        jCheckBoxIfAlarmVoice.setText("打开报警声音");
        jCheckBoxIfAlarmVoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxIfAlarmVoiceItemStateChanged(evt);
            }
        });

        jButtonClear.setBackground(new java.awt.Color(64, 64, 64));
        jButtonClear.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonClear.setForeground(new java.awt.Color(255, 255, 255));
        jButtonClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/clear.png"))); // NOI18N
        jButtonClear.setText("清除信息");
        jButtonClear.setToolTipText("");
        jButtonClear.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonStopVoice.setBackground(new java.awt.Color(64, 64, 64));
        jButtonStopVoice.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jButtonStopVoice.setForeground(new java.awt.Color(255, 255, 255));
        jButtonStopVoice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/broadcastno.png"))); // NOI18N
        jButtonStopVoice.setText("关闭声音");
        jButtonStopVoice.setToolTipText("");
        jButtonStopVoice.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jButtonStopVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopVoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(262, Short.MAX_VALUE)
                .addComponent(jCheckBoxIfPopupAlarmMSG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxIfAlarmVoice)
                .addGap(10, 10, 10)
                .addComponent(jButtonStopVoice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClear)
                .addGap(149, 149, 149))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxIfAlarmVoice)
                    .addComponent(jCheckBoxIfPopupAlarmMSG)
                    .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonStopVoice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setBackground(new java.awt.Color(64, 64, 64));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jCheckBoxMotionDetect.setBackground(new java.awt.Color(64, 64, 64));
        jCheckBoxMotionDetect.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxMotionDetect.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxMotionDetect.setSelected(true);
        jCheckBoxMotionDetect.setText("移动侦测");
        jCheckBoxMotionDetect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMotionDetectItemStateChanged(evt);
            }
        });

        jCheckBoxException.setBackground(new java.awt.Color(64, 64, 64));
        jCheckBoxException.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxException.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxException.setSelected(true);
        jCheckBoxException.setText("异常报警");
        jCheckBoxException.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxExceptionItemStateChanged(evt);
            }
        });

        jCheckBoxTreversePlane.setBackground(new java.awt.Color(64, 64, 64));
        jCheckBoxTreversePlane.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxTreversePlane.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxTreversePlane.setSelected(true);
        jCheckBoxTreversePlane.setText("越界侦测");
        jCheckBoxTreversePlane.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxTreversePlaneItemStateChanged(evt);
            }
        });

        jCheckBoxOther.setBackground(new java.awt.Color(64, 64, 64));
        jCheckBoxOther.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxOther.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxOther.setSelected(true);
        jCheckBoxOther.setText("其他报警");
        jCheckBoxOther.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOtherItemStateChanged(evt);
            }
        });

        jCheckBoxFieldDetecion.setBackground(new java.awt.Color(64, 64, 64));
        jCheckBoxFieldDetecion.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jCheckBoxFieldDetecion.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxFieldDetecion.setSelected(true);
        jCheckBoxFieldDetecion.setText("区域入侵");
        jCheckBoxFieldDetecion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxFieldDetecionItemStateChanged(evt);
            }
        });

        jButtonAlarmFilterSet.setBackground(new java.awt.Color(64, 64, 64));
        jButtonAlarmFilterSet.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAlarmFilterSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jyms/image/alarmfilterset.png"))); // NOI18N
        jButtonAlarmFilterSet.setToolTipText("报警显示设置");
        jButtonAlarmFilterSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlarmFilterSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jCheckBoxMotionDetect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxTreversePlane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxFieldDetecion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxException)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxOther)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAlarmFilterSet, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonAlarmFilterSet, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxOther, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxException, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxFieldDetecion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxTreversePlane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxMotionDetect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableAlarmMSGMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlarmMSGMouseReleased
        // TODO add your handling code here:
        if (evt.getClickCount() == 2){//双击˫��
                //窗口放大
            int Row = jTableAlarmMSG.getSelectedRow();
            if (Row < 0 || Row >= jTableAlarmMSG.getRowCount()) return;
            int Col = jTableAlarmMSG.getSelectedColumn();
            if (Col == jTableAlarmMSG.getColumnCount() - 1) return;
            CommonParas.alarmFMSGCallBack.getJDialogPopUpAlarmMSG(Row);
//            DialogPopUpAlarmMSG.setVisible(true);
        }
    }//GEN-LAST:event_jTableAlarmMSGMouseReleased

    private void jTableAlarmMSGMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlarmMSGMousePressed
        // TODO add your handling code here:
        if (jTableAlarmMSG.getSelectedColumn() == colOfRemarks){
            int Row = jTableAlarmMSG.getSelectedRow();
            oldRemarks = (String)jTableAlarmMSG.getValueAt(Row, colOfRemarks);
            jTableAlarmMSG.editCellAt(Row, colOfRemarks);
            //System.out.println(bb);
        }
    }//GEN-LAST:event_jTableAlarmMSGMousePressed

    private void jCheckBoxIfPopupAlarmMSGItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxIfPopupAlarmMSGItemStateChanged
        // TODO add your handling code here:
//        public static final int DESELECTED 2 
// public static final int SELECTED 1 

        if (evt.getStateChange() == ItemEvent.SELECTED){
            CommonParas.AlarmRecCtrl.ifPopUpWindow = true;
            CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sPopupAlarmWindow,  sFileName);
        }else{
            CommonParas.AlarmRecCtrl.ifPopUpWindow = false;
            CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sNoPopupAlarmWindow,  sFileName);
        }
    }//GEN-LAST:event_jCheckBoxIfPopupAlarmMSGItemStateChanged

    private void jCheckBoxIfAlarmVoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxIfAlarmVoiceItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED){
            CommonParas.AlarmRecCtrl.ifVoice = true;
            CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sEnableAlarmAudio,  sFileName);
        }else{
            CommonParas.AlarmRecCtrl.ifVoice = false;
            CommonParas.alarmFMSGCallBack.stopAlarmVoice();
            CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sNotEnableAlarmAudio,  sFileName);
        }
    }//GEN-LAST:event_jCheckBoxIfAlarmVoiceItemStateChanged

    private void jCheckBoxTreversePlaneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxTreversePlaneItemStateChanged
        // TODO add your handling code here:
        setRowFilter();
    }//GEN-LAST:event_jCheckBoxTreversePlaneItemStateChanged

    private void jCheckBoxMotionDetectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMotionDetectItemStateChanged
        // TODO add your handling code here:
        setRowFilter();
    }//GEN-LAST:event_jCheckBoxMotionDetectItemStateChanged

    private void jCheckBoxFieldDetecionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxFieldDetecionItemStateChanged
        // TODO add your handling code here:
        setRowFilter();
    }//GEN-LAST:event_jCheckBoxFieldDetecionItemStateChanged

    private void jCheckBoxExceptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxExceptionItemStateChanged
        // TODO add your handling code here:
        setRowFilter();
    }//GEN-LAST:event_jCheckBoxExceptionItemStateChanged

    private void jCheckBoxOtherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOtherItemStateChanged
        // TODO add your handling code here:
        setRowFilter();
    }//GEN-LAST:event_jCheckBoxOtherItemStateChanged

    private void jButtonAlarmFilterSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlarmFilterSetActionPerformed
        // TODO add your handling code here:
        try{
            JDialogAlarmFilterSet DialogAlarmFilterSet = new JDialogAlarmFilterSet(null,true);
            //设置窗口显示位置
            CommonParas.setAppropriateLocation(DialogAlarmFilterSet, jButtonAlarmFilterSet);
            DialogAlarmFilterSet.setVisible(true);
            //DialogAlarmFilterSet.setLocation(jButtonAlarmFilterSet.getX() - DialogAlarmFilterSet.getWidth(), jButtonAlarmFilterSet.getY() - DialogAlarmFilterSet.getHeight());

            if (DialogAlarmFilterSet.getState() < 0) return;
            String sFilter = DialogAlarmFilterSet.getsFilter();

    //        ((TableRowSorter)jTableAlarmMSG.getRowSorter()).setRowFilter(RowFilter.regexFilter(sFilter));
            if (sFilter == null) {
                jTableAlarmMSG.setRowSorter(null);
                CommonParas.SystemWriteLog( "",  CommonParas.LogType.LOG_OPER_CODE,  sAlarmDisplaySettings,  sAlarmDisplaySettingsAll,  sFileName);
            }else {
                TableRowSorter sorter = new TableRowSorter(CommonParas.alarmMSGTableModel);
                sorter.setRowFilter(RowFilter.regexFilter(sFilter));
                jTableAlarmMSG.setRowSorter(sorter);
                CommonParas.SystemWriteLog( "",  CommonParas.LogType.LOG_OPER_CODE,  sAlarmDisplaySettings,  sFilter,  sFileName);
            }

            setJCheckBoxState(sFilter);
        }catch(Exception e){
            TxtLogger.append(this.sFileName, "jButtonAlarmFilterSetActionPerformed()","系统在设置过滤条件的过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
    }//GEN-LAST:event_jButtonAlarmFilterSetActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        CommonParas.clearMessageAlarmList(jTabbedPaneAlarm.getSelectedIndex());
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonStopVoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopVoiceActionPerformed
        // TODO add your handling code here:
        CommonParas.alarmFMSGCallBack.stopAlarmVoice();
    }//GEN-LAST:event_jButtonStopVoiceActionPerformed
    
    /**
	 * 函数:      modifyRemarks
         * 函数描述:  修改报警记录的备注
    */
    private void modifyRemarks(int Row,int Col,String NewRemarks){
        String sOperateTime = (String)CommonParas.alarmMSGTableModel.getValueAt(Row, 1);
        ClientLogBean.setClientLogRemarks(sOperateTime, NewRemarks, sFileName);
    }
    /**
	 * 函数:      setTableColWidth
         * 函数描述:  设置表格特殊列的宽度
    */
    private void setTableColWidth(){
        //"ID0", "报警时间1",  "报警类型2", "报警设备3", "通道/报警输入/硬盘号4","接入设备5","通道号6","报警时间2-7","备注8"
        TableColumnModel tcmAlarmMSG = jTableAlarmMSG.getColumnModel();
        tcmAlarmMSG.getColumn(0).setMinWidth(60);
        tcmAlarmMSG.getColumn(0).setMaxWidth(60);
        tcmAlarmMSG.getColumn(0).setPreferredWidth(60);
        
        tcmAlarmMSG.getColumn(1).setMinWidth(200);
        tcmAlarmMSG.getColumn(1).setMaxWidth(250);
        tcmAlarmMSG.getColumn(1).setPreferredWidth(200);
        
        tcmAlarmMSG.getColumn(2).setMinWidth(240);
        tcmAlarmMSG.getColumn(2).setMaxWidth(300);
        tcmAlarmMSG.getColumn(2).setPreferredWidth(240);
        
        tcmAlarmMSG.getColumn(3).setMinWidth(160);
        tcmAlarmMSG.getColumn(3).setMaxWidth(200);
        tcmAlarmMSG.getColumn(3).setPreferredWidth(160);
        
        tcmAlarmMSG.getColumn(4).setMinWidth(200);
        tcmAlarmMSG.getColumn(4).setMaxWidth(250); 
        tcmAlarmMSG.getColumn(4).setPreferredWidth(1200);
        
        tcmAlarmMSG.getColumn(5).setMinWidth(160);
        tcmAlarmMSG.getColumn(5).setMaxWidth(200);
        tcmAlarmMSG.getColumn(5).setPreferredWidth(160);
        
        tcmAlarmMSG.getColumn(6).setMinWidth(160);
        tcmAlarmMSG.getColumn(6).setMaxWidth(200);
        tcmAlarmMSG.getColumn(6).setPreferredWidth(160);
        
        tcmAlarmMSG.getColumn(7).setMinWidth(0);
        tcmAlarmMSG.getColumn(7).setMaxWidth(0);
        tcmAlarmMSG.getColumn(7).setPreferredWidth(0);
        
        TableColumnModel tcmErrorMSG = jTableErrorMSG.getColumnModel();
        tcmErrorMSG.getColumn(0).setMinWidth(200);
        tcmErrorMSG.getColumn(0).setMaxWidth(250);
        tcmErrorMSG.getColumn(0).setPreferredWidth(250);

        
        
//        tcmAlarmOut.getColumn(7).setMinWidth(80);
//        tcmAlarmOut.getColumn(7).setMaxWidth(80);
//        tcmAlarmOut.getColumn(7).setPreferredWidth(80);

    }
    
    private void setJCheckBoxState(String sFilter){
        if(sFilter == null) sFilter = sAlarmAllList ;//"信号量报警|硬盘满|信号丢失|移动侦测|硬盘未格式化|读写硬盘出错|遮挡报警|制式不匹配|非法访问|视频信号异常|录像/抓图异常|越界侦测报警|区域入侵侦测报警";
        if(sFilter.contains(sMotionDetection)) jCheckBoxMotionDetect.setSelected(true);
        else  jCheckBoxMotionDetect.setSelected(false);
        
        if(sFilter.contains(sCrossBorderDetection)) jCheckBoxTreversePlane.setSelected(true);
        else  jCheckBoxTreversePlane.setSelected(false);
        
        if(sFilter.contains(sIntrusionDetection)) jCheckBoxFieldDetecion.setSelected(true);
        else  jCheckBoxFieldDetecion.setSelected(false);
        
        if(sFilter.contains(sHardDiskFull) || sFilter.contains(sHardDiskNoFormatted) || sFilter.contains(sRWHDDError) || sFilter.contains(sVideoMismatch) 
                || sFilter.contains(sUnauthorizedAccess) || sFilter.contains(sVideoException) || sFilter.contains(sRecordCaptureException)) 
            jCheckBoxException.setSelected(true);
        else  jCheckBoxException.setSelected(false);
        
        if(sFilter.contains(sBlockAlarm) || sFilter.contains(sSignalLoss) || sFilter.contains(sSignalAlarm) ) 
            jCheckBoxOther.setSelected(true);
        else  jCheckBoxOther.setSelected(false);

    }
    
    private void setRowFilter(){
        //{"信号量报警0","硬盘满1","信号丢失2","移动侦测3","硬盘未格式化4","读写硬盘出错5","遮挡报警6",
        //    "制式不匹配7","非法访问8","视频信号异常9","录像/抓图异常10","越界侦测报警11","区域入侵侦测报警12" }
        try{
            String sFilter = "";
            ArrayList listAlarmTypes = CommonParas.alarmFMSGCallBack.getListShowAlarmTypes();
            if (jCheckBoxMotionDetect.isSelected()) {
                sFilter = sFilter + "|" + sMotionDetection;
                ((ArrayList)listAlarmTypes.get(3)).set(0, true);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sSetMotionDetection,  sFileName);
            }else {
                ((ArrayList)listAlarmTypes.get(3)).set(0, false);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sNoSetMotionDetection,  sFileName);
            }
            //信号量报警|硬盘满|信号丢失|移动侦测|硬盘未格式化|读写硬盘出错|遮挡报警|制式不匹配|非法访问|视频信号异常|录像/抓图异常|越界侦测报警|区域入侵侦测报警
            if (jCheckBoxTreversePlane.isSelected()) {
                sFilter = sFilter + "|" + sCrossBorderDetection ;
                ((ArrayList)listAlarmTypes.get(11)).set(0, true);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sSetCrossBorderDetection,  sFileName);
            }else {
                ((ArrayList)listAlarmTypes.get(11)).set(0, false);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sNoSetCrossBorderDetection,  sFileName);
            }

            if (jCheckBoxFieldDetecion.isSelected()) {
                sFilter = sFilter + "|" + sIntrusionDetection ;
                ((ArrayList)listAlarmTypes.get(12)).set(0, true);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sSetIntrusionDetection,  sFileName);
            }else {
                ((ArrayList)listAlarmTypes.get(12)).set(0, false);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sNoSetIntrusionDetection,  sFileName);
            }

            if (jCheckBoxException.isSelected()) {
                sFilter = sFilter + "|" + sExceptionAlarmList;//"硬盘满|硬盘未格式化|读写硬盘出错|制式不匹配|非法访问|视频信号异常|录像/抓图异常";
                ((ArrayList)listAlarmTypes.get(1)).set(0, true);
                ((ArrayList)listAlarmTypes.get(4)).set(0, true);
                ((ArrayList)listAlarmTypes.get(5)).set(0, true);
                ((ArrayList)listAlarmTypes.get(7)).set(0, true);
                ((ArrayList)listAlarmTypes.get(8)).set(0, true);
                ((ArrayList)listAlarmTypes.get(9)).set(0, true);
                ((ArrayList)listAlarmTypes.get(10)).set(0, true);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sSetExceptionAlarm,  sFileName);
            }else {
                ((ArrayList)listAlarmTypes.get(1)).set(0, false);
                ((ArrayList)listAlarmTypes.get(4)).set(0, false);
                ((ArrayList)listAlarmTypes.get(5)).set(0, false);
                ((ArrayList)listAlarmTypes.get(7)).set(0, false);
                ((ArrayList)listAlarmTypes.get(8)).set(0, false);
                ((ArrayList)listAlarmTypes.get(9)).set(0, false);
                ((ArrayList)listAlarmTypes.get(10)).set(0, false);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sNoSetExceptionAlarm,  sFileName);
            }

            if (jCheckBoxOther.isSelected()) {
                sFilter = sFilter + "|" + sBlockAlarm  + "|" + sSignalLoss  + "|" + sSignalAlarm ;//"遮挡报警|信号丢失|信号量报警";
                ((ArrayList)listAlarmTypes.get(6)).set(0, true);
                ((ArrayList)listAlarmTypes.get(2)).set(0, true);
                ((ArrayList)listAlarmTypes.get(0)).set(0, true);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sSetOtherAlarm,  sFileName);
            }else {
                ((ArrayList)listAlarmTypes.get(6)).set(0, false);
                ((ArrayList)listAlarmTypes.get(2)).set(0, false);
                ((ArrayList)listAlarmTypes.get(0)).set(0, false);
                CommonParas.SystemWriteLog( CommonParas.LogType.LOG_OPER_CODE,  sNoSetOtherAlarm,  sFileName);
            }

            if (!sFilter.equals("")) {
                sFilter = sFilter.substring(1);
            }else sFilter = "!!!!!!!!!!!!!!!!!";
            TableRowSorter sorter = new TableRowSorter(CommonParas.alarmMSGTableModel);
            sorter.setRowFilter(RowFilter.regexFilter(sFilter));
            jTableAlarmMSG.setRowSorter(sorter);
        }catch(Exception e)
        {
            TxtLogger.append(this.sFileName, "setRowFilter()","系统在选择报警显示项目过程中，出现错误" + 
                            "\r\n                       Exception:" + e.toString());   
        }
    }
    
    /**
        * 函数:      modifyLocales
        * 函数描述:  根据系统语言设置窗口的控件信息和消息文本
        * @param Language 设置的系统语言
    */
    private void modifyLocales(){
        
        if (CommonParas.SysParas.ifChinese) return;//如果是中文，则不做任何操作
        
        MyLocales Locales = CommonParas.SysParas.sysLocales;
        
        //标签和按钮显示
        jButtonAlarmFilterSet.setToolTipText(Locales.getString("ClassStrings", "JInFrameAlarmMSG.jButtonAlarmFilterSet"));//报警显示设置
        jButtonClear.setText(             Locales.getString("ClassStrings", "JInFrameAlarmMSG.jButtonClear"));//清除信息
        jButtonStopVoice.setText(         Locales.getString("ClassStrings", "JInFrameAlarmMSG.jButtonStopVoice"));//关闭声音
        jCheckBoxException.setText(       Locales.getString("ClassStrings", "JInFrameAlarmMSG.jCheckBoxException"));//异常报警
        jCheckBoxFieldDetecion.setText(   Locales.getString("ClassStrings", "JInFrameAlarmMSG.jCheckBoxFieldDetecion"));//区域入侵
        jCheckBoxIfAlarmVoice.setText(    Locales.getString("ClassStrings", "JInFrameAlarmMSG.jCheckBoxIfAlarmVoice"));//打开报警声音
        jCheckBoxIfPopupAlarmMSG.setText( Locales.getString("ClassStrings", "JInFrameAlarmMSG.jCheckBoxIfPopupAlarmMSG"));//弹出报警窗口
        jCheckBoxMotionDetect.setText(    Locales.getString("ClassStrings", "JInFrameAlarmMSG.jCheckBoxMotionDetect"));//移动侦测
        jCheckBoxOther.setText(           Locales.getString("ClassStrings", "JInFrameAlarmMSG.jCheckBoxOther"));//其他报警
        jCheckBoxTreversePlane.setText(   Locales.getString("ClassStrings", "JInFrameAlarmMSG.jCheckBoxTreversePlane"));//越界侦测
        jTabbedPaneAlarm.setTitleAt(0,    Locales.getString("ClassStrings", "JInFrameAlarmMSG.jScrollPaneAlarm"));//报警
        jTabbedPaneAlarm.setTitleAt(1,    Locales.getString("ClassStrings", "JInFrameAlarmMSG.jScrollPaneError"));//错误
        
        //信息显示
        alarmMSGTableHeaderTitle[0] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle0");  //ID
        alarmMSGTableHeaderTitle[1] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle1");  //报警时间
        alarmMSGTableHeaderTitle[2] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle2");  //报警类型
        alarmMSGTableHeaderTitle[3] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle3");  //报警设备
        alarmMSGTableHeaderTitle[4] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle4");  //通道/报警输入/硬盘号
        alarmMSGTableHeaderTitle[5] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle5");  //接入设备
        alarmMSGTableHeaderTitle[6] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle6");  //通道号
        alarmMSGTableHeaderTitle[8] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.alarmMSGTableHeaderTitle7");  //备注
        errorMSGTableHeaderTitle[0] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.errorMSGTableHeaderTitle0");  //时间
        errorMSGTableHeaderTitle[1] = Locales.getString("MessageStrings", "JInFrameAlarmMSG.errorMSGTableHeaderTitle1");  //描述
        
        sPopupAlarmWindow = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sPopupAlarmWindow");  //设置弹出报警窗口
        sNoPopupAlarmWindow = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sNoPopupAlarmWindow");  //设置不弹出报警窗口
        sEnableAlarmAudio = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sEnableAlarmAudio");  //设置报警时发出声音
        sNotEnableAlarmAudio = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sNotEnableAlarmAudio");  //设置报警时不发出声音

        sAlarmDisplaySettings = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sAlarmDisplaySettings");  //设置报警显示过滤条件
        sAlarmDisplaySettingsAll = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sAlarmDisplaySettingsAll");  //全部显示

        sSignalAlarm = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sSignalAlarm");  //信号量报警
        sHardDiskFull = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sHardDiskFull");  //硬盘满
        sSignalLoss = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sSignalLoss");  //信号丢失
        sMotionDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sMotionDetection");  //移动侦测
        sHardDiskNoFormatted = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sHardDiskNoFormatted");  //硬盘未格式化
        sRWHDDError = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sRWHDDError");  //读写硬盘出错
        sBlockAlarm = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sBlockAlarm");  //遮挡报警
        sVideoMismatch = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sVideoMismatch");  //制式不匹配
        sUnauthorizedAccess = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sUnauthorizedAccess");  //非法访问
        sVideoException = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sVideoException");  //视频信号异常
        sRecordCaptureException = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sRecordCaptureException");  //录像/抓图异常
        sCrossBorderDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sCrossBorderDetection");  //越界侦测
        sIntrusionDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sIntrusionDetection");  //区域入侵侦测
        sAlarmAllList = sSignalAlarm + "|" + sHardDiskFull + "|" + sSignalLoss + "|" + sMotionDetection + "|" + sHardDiskNoFormatted + "|" 
                        + sRWHDDError + "|" + sBlockAlarm + "|" + sVideoMismatch + "|" + sUnauthorizedAccess + "|" + sVideoException + "|" 
                        + sRecordCaptureException + "|" + sCrossBorderDetection + "|" + sIntrusionDetection;  //信号量报警|硬盘满|信号丢失|移动侦测|硬盘未格式化|读写硬盘出错|遮挡报警|制式不匹配|非法访问|视频信号异常|录像/抓图异常|越界侦测|区域入侵侦测
        sExceptionAlarmList = sHardDiskFull + "|" + sHardDiskNoFormatted + "|" + sRWHDDError + "|" + sVideoMismatch + "|" 
                        + sUnauthorizedAccess + "|" + sVideoException + "|" + sRecordCaptureException;//"硬盘满|硬盘未格式化|读写硬盘出错|制式不匹配|非法访问|视频信号异常|录像/抓图异常"
        sSetMotionDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sSetMotionDetection");  //设置显示移动侦测报警
        sNoSetMotionDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sNoSetMotionDetection");  //设置不显示移动侦测报警
        sSetCrossBorderDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sSetCrossBorderDetection");  //设置显示越界侦测报警
        sNoSetCrossBorderDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sNoSetCrossBorderDetection");  //设置不显示越界侦测报警
        sSetIntrusionDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sSetIntrusionDetection");  //设置显示区域入侵侦测报警
        sNoSetIntrusionDetection = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sNoSetIntrusionDetection");  //设置不显示区域入侵侦测报警
        sSetExceptionAlarm = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sSetExceptionAlarm");  //设置显示异常报警
        sNoSetExceptionAlarm = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sNoSetExceptionAlarm");  //设置不显示异常报警
        sSetOtherAlarm = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sSetOtherAlarm");  //设置显示其他报警
        sNoSetOtherAlarm = Locales.getString("MessageStrings", "JInFrameAlarmMSG.sNoSetOtherAlarm");  //设置不显示其他报警
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlarmFilterSet;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonStopVoice;
    private javax.swing.JCheckBox jCheckBoxException;
    private javax.swing.JCheckBox jCheckBoxFieldDetecion;
    private javax.swing.JCheckBox jCheckBoxIfAlarmVoice;
    private javax.swing.JCheckBox jCheckBoxIfPopupAlarmMSG;
    private javax.swing.JCheckBox jCheckBoxMotionDetect;
    private javax.swing.JCheckBox jCheckBoxOther;
    private javax.swing.JCheckBox jCheckBoxTreversePlane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPaneAlarm;
    private javax.swing.JScrollPane jScrollPaneError;
    private javax.swing.JTabbedPane jTabbedPaneAlarm;
    private javax.swing.JTable jTableAlarmMSG;
    private javax.swing.JTable jTableErrorMSG;
    // End of variables declaration//GEN-END:variables

    private String sPopupAlarmWindow = "设置弹出报警窗口";
    private String sNoPopupAlarmWindow = "设置不弹出报警窗口";
    private String sEnableAlarmAudio = "设置报警时发出声音";
    private String sNotEnableAlarmAudio = "设置报警时不发出声音";

    private String sAlarmDisplaySettings = "设置报警显示过滤条件";
    private String sAlarmDisplaySettingsAll = "全部显示";
    private String sAlarmAllList = "信号量报警|硬盘满|信号丢失|移动侦测|硬盘未格式化|读写硬盘出错|遮挡报警|制式不匹配|非法访问|视频信号异常|录像/抓图异常|越界侦测|区域入侵侦测";
    private String sExceptionAlarmList = "硬盘满|硬盘未格式化|读写硬盘出错|制式不匹配|非法访问|视频信号异常|录像/抓图异常";
    private String sSignalAlarm = "信号量报警";
    private String sHardDiskFull = "硬盘满";
    private String sSignalLoss = "信号丢失";
    private String sMotionDetection = "移动侦测";
    private String sHardDiskNoFormatted = "硬盘未格式化";
    private String sRWHDDError = "读写硬盘出错";
    private String sBlockAlarm = "遮挡报警";
    private String sVideoMismatch = "制式不匹配";
    private String sUnauthorizedAccess = "非法访问";
    private String sVideoException = "视频信号异常";
    private String sRecordCaptureException = "录像/抓图异常";
    private String sCrossBorderDetection = "越界侦测";
    private String sIntrusionDetection = "区域入侵侦测";
    private String sSetMotionDetection = "设置显示移动侦测报警";
    private String sNoSetMotionDetection = "设置不显示移动侦测报警";
    private String sSetCrossBorderDetection = "设置显示越界侦测报警";
    private String sNoSetCrossBorderDetection = "设置不显示越界侦测报警";
    private String sSetIntrusionDetection = "设置显示区域入侵侦测报警";
    private String sNoSetIntrusionDetection = "设置不显示区域入侵侦测报警";
    private String sSetExceptionAlarm = "设置显示异常报警";
    private String sNoSetExceptionAlarm = "设置不显示异常报警";
    private String sSetOtherAlarm = "设置显示其他报警";
    private String sNoSetOtherAlarm = "设置不显示其他报警";
    
    
}
